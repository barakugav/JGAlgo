<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
  <Match>
    <!-- we dont care about serialization (currently) -->
    <Bug pattern="SE_COMPARATOR_SHOULD_BE_SERIALIZABLE" />
  </Match>
  <Match>
    <!-- Intended -->
    <Class name="com.jgalgo.internal.util.DebugPrinter" />
    <Method name="setPrintStream" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The Path object indeed store a mutable reference to the graph and the user should not
    modify the graph while the Path object is in use -->
    <Class name="com.jgalgo.alg.common.Path" />
    <Constructor />
    <Local name="g" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The array of keys should be used carfully by the user, this is not a safe API -->
    <Or>
      <Class name="com.jgalgo.internal.ds.IndexPairingHeapInt" />
      <Class name="com.jgalgo.internal.ds.IndexPairingHeapDouble" />
      <Class name="com.jgalgo.internal.ds.IndexPairingHeapObj" />
    </Or>
    <Constructor />
    <Local name="key" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The return value is a reference to the minimum root node, and its desire to expose it -->
    <Or>
      <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*FibonacciHeap" />
      <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*PairingHeap" />
    </Or>
    <Method name="findMin" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is reference to the extracted node, and its desire to expose it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*PairingHeap" />
    <Method name="extractMin" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- the provided reference is already internal object -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*PairingHeap" />
    <Method name="remove" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- should be fine -->
    <Class name="com.jgalgo.alg.math.MatchingWeightedGabow1990Abstract$Worker" />
    <Bug pattern="FL_FLOATS_AS_LOOP_COUNTERS" />
  </Match>
  <Match>
    <!-- hashCode and toString are defined in super class, equals is defined in per-type sub-class -->
    <Or>
      <Class name="com.jgalgo.graph.DataContainer$Obj" />
      <Class name="com.jgalgo.graph.DataContainer$Int" />
      <Class name="com.jgalgo.graph.DataContainer$Long" />
    </Or>
    <Bug pattern="HE_EQUALS_NO_HASHCODE" />
  </Match>
  <Match>
    <!-- hashCode and toString are defined in super class, equals is defined in per-type sub-class -->
    <Or>
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Obj" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Byte" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Short" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Int" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Long" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Float" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Double" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Bool" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Char" />
    </Or>
    <Bug pattern="HE_EQUALS_NO_HASHCODE" />
  </Match>
  <Match>
    <!-- the returned view is unmodifiable, its ok to expose it -->
    <Or>
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Obj" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Byte" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Short" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Int" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Long" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Float" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Double" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Bool" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Char" />
    </Or>
    <Method name="values" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- this is internal API, its ok to expose it -->
    <Class name="com.jgalgo.graph.IWeightsImpl$Abstract" />
    <Method name="container" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- the returned list is immutable -->
    <Class name="com.jgalgo.alg.dag.TopologicalOrderAlgoAbstract$IndexResult" />
    <Method name="orderedVertices" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- NoSuchElementException will be thrown by Assertions.hasNext(this); -->
    <Or>
      <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*BinarySearchTrees\$BstIterator" />
      <Class name="com.jgalgo.internal.ds.HeapBinary$It" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedGabow1990Abstract$Blossom$1$1" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedGabow1990Abstract$Worker$1" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedGabow1990Abstract$Worker$2" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Blossom$1$1" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Blossom$2$1" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Tree$1$1" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Tree$2$1" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Worker$2$1" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Worker$3$1" />
      <Class name="com.jgalgo.internal.util.IterTools$IterPeekableImpl" />
      <Class name="com.jgalgo.internal.util.JGAlgoUtils$NullListIterator" />
      <Class name="com.jgalgo.internal.util.JGAlgoUtils$PermutationsIter" />
      <Class name="com.jgalgo.internal.util.JGAlgoUtils$PermutationsIterInt" />
    </Or>
    <Method name="next" />
    <Bug pattern="IT_NO_SUCH_ELEMENT" />
  </Match>
  <Match>
    <!-- used when Debug=true -->
    <Or>
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Debug" />
      <Class name="com.jgalgo.alg.match.MatchingWeightedBlossomV$Debug$Impl" />
    </Or>
    <Or>
      <Bug pattern="UC_USELESS_VOID_METHOD" />
      <Bug pattern="UUF_UNUSED_FIELD" />
    </Or>
  </Match>
  <Match>
    <!-- The function is documented, the given values are not copied and the user should not use them again -->
    <Class name="com.jgalgo.alg.match.MatchingAlgoAbstract$IndexMatching" />
    <Constructor />
    <!-- <Or>
      <Local name="g" />
      <Local name="matched" />
    </Or> -->
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The returned values are immutables -->
    <Class name="com.jgalgo.alg.match.MatchingAlgoAbstract$IndexMatching" />
    <Or>
      <Method name="edges" />
      <Method name="matchedVertices" />
      <Method name="unmatchedVertices" />
    </Or>
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The immutable array set should not copy the array, it assumed the array will not be used
    again by the user -->
    <Class name="com.jgalgo.internal.util.ImmutableIntArraySet" />
    <Constructor />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Provided graph is input, not internal state of the generator -->
    <Or>
      <Class name="com.jgalgo.gen.LineGraphGenerator" />
      <Class name="com.jgalgo.gen.ComplementGraphGenerator" />
    </Or>
    <Method name="graph" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Provided graphs are input, not internal state of the generator -->
    <Or>
      <Class name="com.jgalgo.gen.DifferenceGraphGenerator" />
      <Class name="com.jgalgo.gen.SymmetricDifferenceGraphGenerator" />
    </Or>
    <Method name="graphs" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Classes copied from fastutil -->
    <Or>
      <Class name="com.jgalgo.internal.util.IntImmutableList2" />
      <Class name="com.jgalgo.internal.util.IntImmutableList2$ImmutableSubList" />
    </Or>
    <Or>
      <Bug pattern="CN_IDIOM_NO_SUPER_CALL" />
      <Bug pattern="EI_EXPOSE_REP2" />
      <Bug pattern="HE_EQUALS_NO_HASHCODE" />
      <Bug pattern="RV_NEGATING_RESULT_OF_COMPARETO" />
      <Bug pattern="CO_SELF_NO_OBJECT" />
    </Or>
  </Match>
  <Match>
    <!-- The returned values are either immutables, or inputs in the first place -->
    <Class name="com.jgalgo.alg.isomorphism.IsomorphismTesterAbstract$IndexMapping" />
    <Constructor />
    <Or>
      <Local name="edgeMapping" />
      <Local name="vertexMapping" />
      <Local name="g1" />
      <Local name="g2" />
    </Or>
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The function is documented, the given values are not copied and the user should not use them again -->
    <Class name="com.jgalgo.alg.isomorphism.IsomorphismTesterAbstract$IndexMapping" />
    <Or>
      <Method name="mappedEdges" />
      <Method name="mappedVertices" />
      <Method name="sourceGraph" />
      <Method name="targetGraph" />
    </Or>
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The function is documented -->
    <!-- The input graph should not be modified, it is an input to the algorithm -->
    <!-- the mask SHOULD be modified by the caller before calling the subroutine -->
    <Class name="com.jgalgo.alg.path.KShortestPathsStBasedPathsTree$ShortestPathSubroutine" />
    <Constructor />
    <Or>
      <Local name="g" />
      <Local name="edgesMask" />
    </Or>
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The stored graph is not a state of the exception -->
    <Class name="com.jgalgo.alg.path.NegativeCycleException" />
    <Constructor />
    <!-- <Local name="graph" /> -->
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The function is documented, the graph should not be modified during the lifetime of the result object -->
    <Class name="com.jgalgo.alg.path.ShortestPathAllPairsAbstract$IndexResult" />
    <Constructor />
    <Local name="g" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The function is documented, the arguments should not be used by the caller after constructing the result -->
    <Class name="com.jgalgo.alg.path.VoronoiAlgoAbstract$IndexResult" />
    <Constructor />
    <!-- <Or>
      <Local name="distances" />
      <Local name="backtrack" />
      <Local name="sites" />
    </Or> -->
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The returned object is immutable -->
    <Class name="com.jgalgo.alg.span.SteinerTreeAlgoAbstract$IndexResult" />
    <Method name="edges" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The constructor is documented, and the result array should not be modified after constructing the result -->
    <Class name="com.jgalgo.alg.tree.LowestCommonAncestorOfflineAbstract$IndexResult" />
    <Constructor />
    <Local name="preQueryResult" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The constructor is documented, and the result array should not be modified after constructing the result -->
    <Class name="com.jgalgo.alg.tree.TreePathMaximaAbstract$IndexResult" />
    <Constructor />
    <Local name="preQueryResult" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The constructor is documented, and given arrays should not be modified after constructing the result -->
    <Class name="com.jgalgo.alg.connect.BiConnectedComponentsAlgoAbstract$IndexResult" />
    <Constructor />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The returned object is immutable -->
    <Class name="com.jgalgo.alg.connect.BiConnectedComponentsAlgoAbstract$IndexResult" />
    <Or>
      <Method name="getBlockGraph" />
      <Method name="getCutVertices" />
    </Or>
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The constructor is documented, and given graph and arrays should not be modified after constructing the result -->
    <Class name="com.jgalgo.alg.path.ShortestPathSingleSourceAbstract$IndexResult" />
    <Constructor />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <Class name="com.jgalgo.alg.path.ShortestPathSingleSourceAbstract$IndexResult" />
    <Or>
      <!-- The returned graph is the input graph, not internal state of the result object -->
      <Method name="graph" />
      <!-- The returned graph is immutable -->
      <Method name="shortestPathTree" />
    </Or>
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The class is anonymous, effectively final, impossible to override `finalize()` -->
    <Or>
      <Class name="com.jgalgo.alg.clique.MaximalCliquesEnumeratorBronKerboschPivot$1" />
      <Class name="com.jgalgo.alg.connect.ContractableGraph$1" />
      <Class name="com.jgalgo.alg.cycle.CyclesEnumeratorJohnson$1" />
      <Class name="com.jgalgo.alg.cycle.CyclesEnumeratorTarjan$1" />
      <Class name="com.jgalgo.alg.path.SimplePathsEnumeratorSedgewick$1" />
    </Or>
    <Bug pattern="CT_CONSTRUCTOR_THROW" />
  </Match>
  <Match>
    <!-- The class is not public and all its subclasses are final -->
    <Or>
      <Class name="com.jgalgo.alg.common.VertexPartitions$IntPartitionFromIndexPartition" />
      <Class name="com.jgalgo.alg.common.VertexPartitions$ObjPartitionFromIndexPartition" />
      <Class name="com.jgalgo.alg.hamilton.HamiltonianPathRubin$IterBase" />
      <Class name="com.jgalgo.alg.isomorphism.IsomorphismTesterVf2$IsomorphismIterBase" />
      <Class name="com.jgalgo.graph.GraphBaseMutable" />
      <Class name="com.jgalgo.graph.GraphCsrAbstractUnindexed" />
      <Class name="com.jgalgo.graph.GraphCsrBase" />
      <Class name="com.jgalgo.graph.GraphElementSet" />
      <Class name="com.jgalgo.graph.GraphHashmapMultiAbstract$EdgeIterBase" />
      <Class name="com.jgalgo.graph.GraphMatrixAbstract" />
      <Class name="com.jgalgo.graph.UndirectedGraphViews$UndirectedViewIntBase" />
      <Class name="com.jgalgo.internal.util.BitmapBase" />
      <Class name="com.jgalgo.internal.util.Range$Iter" />
    </Or>
    <Bug pattern="CT_CONSTRUCTOR_THROW" />
  </Match>
</FindBugsFilter>
