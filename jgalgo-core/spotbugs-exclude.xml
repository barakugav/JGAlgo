<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
  <Match>
    <!-- we dont care about serialization (currently) -->
    <Bug pattern="SE_COMPARATOR_SHOULD_BE_SERIALIZABLE" />
  </Match>
  <Match>
    <!-- Heap element in DSatur coloring implementation is only used in a heap, in which the
    compareTo() method is used and the equals() is not -->
    <Class name="com.jgalgo.alg.ColoringDSaturHeap$HeapElm" />
    <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />
  </Match>
  <Match>
    <!-- DSatur coloring heap SHOULD negate the comparison result, as we want vertices with GREATER
    degree to be extracted first from the heap -->
    <Class name="com.jgalgo.alg.ColoringDSaturHeap$HeapElm" />
    <Method name="compareTo" />
    <Bug pattern="RV_NEGATING_RESULT_OF_COMPARETO" />
  </Match>
  <Match>
    <!-- Intended -->
    <Class name="com.jgalgo.internal.util.DebugPrinter" />
    <Method name="setPrintStream" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The Path object indeed store a mutable reference to the graph and the user should not
    modify the graph while the Path object is in use -->
    <Class name="com.jgalgo.alg.Path" />
    <Constructor />
    <Local name="g" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The array of keys should be used carfully by the user, this is not a safe API -->
    <Or>
      <Class name="com.jgalgo.internal.ds.IndexPairingHeapInt" />
      <Class name="com.jgalgo.internal.ds.IndexPairingHeapDouble" />
      <Class name="com.jgalgo.internal.ds.IndexPairingHeapObj" />
    </Or>
    <Constructor />
    <Local name="key" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- The return value is a view of the heap, and the user SHOULD modify the heap through it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*HeapBinomial" />
    <Method name="refsSet" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is a view of the heap, and the user SHOULD modify the heap through it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*FibonacciHeap" />
    <Method name="refsSet" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is a view of the heap, and the user SHOULD modify the heap through it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*PairingHeap" />
    <Method name="refsSet" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is a view of the tree, and the user SHOULD modify the tree through it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*RedBlackTree" />
    <Method name="refsSet" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is a view of the tree, and the user SHOULD modify the tree through it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*SplayTree" />
    <Method name="refsSet" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is reference to the minimum root node, and its desire to expose it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*FibonacciHeap" />
    <Method name="findMin" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is reference to the root node, and its desire to expose it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*PairingHeap" />
    <Method name="findMin" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- The return value is reference to the extracted node, and its desire to expose it -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*PairingHeap" />
    <Method name="extractMin" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- the provided reference is already internal object -->
    <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*PairingHeap" />
    <Method name="remove" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- should be fine -->
    <Class name="com.jgalgo.alg.MatchingWeightedGabow1990Abstract$Worker" />
    <Bug pattern="FL_FLOATS_AS_LOOP_COUNTERS" />
  </Match>
  <Match>
    <!-- intentional -->
    <Class name="com.jgalgo.alg.SSSPDial$DialHeap" />
    <Method name="extractMin" />
    <Field name="scanIdx" />
    <Bug pattern="SA_FIELD_SELF_ASSIGNMENT" />
  </Match>
  <Match>
    <!-- hashCode and toString are defined in super class, equals is defined in per-type sub-class -->
    <Or>
      <Class name="com.jgalgo.graph.DataContainer$Obj" />
      <Class name="com.jgalgo.graph.DataContainer$Int" />
      <Class name="com.jgalgo.graph.DataContainer$Long" />
    </Or>
    <Bug pattern="HE_EQUALS_NO_HASHCODE" />
  </Match>
  <Match>
    <!-- hashCode and toString are defined in super class, equals is defined in per-type sub-class -->
    <Or>
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Obj" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Byte" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Short" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Int" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Long" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Float" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Double" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Bool" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Char" />
    </Or>
    <Bug pattern="HE_EQUALS_NO_HASHCODE" />
  </Match>
  <Match>
    <!-- the returned view is unmodifiable, its ok to expose it -->
    <Or>
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Obj" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Byte" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Short" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Int" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Long" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Float" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Double" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Bool" />
      <Class name="com.jgalgo.graph.IWeightsImpl$Index$Char" />
    </Or>
    <Method name="values" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- this is internal API, its ok to expose it -->
    <Class name="com.jgalgo.graph.IWeightsImpl$Abstract" />
    <Method name="container" />
    <Bug pattern="EI_EXPOSE_REP" />
  </Match>
  <Match>
    <!-- hashCode and toString are defined in super class, equals is defined in per-type sub-class -->
    <Or>
      <Class name="com.jgalgo.alg.AStar" />
      <Class name="com.jgalgo.alg.ColoringDSaturHeap" />
      <Class name="com.jgalgo.alg.MSTFredmanTarjan" />
      <Class name="com.jgalgo.alg.MSTPrim" />
    </Or>
    <Method name="setHeapBuilder" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- NoSuchElementException will be thrown by Assertions.hasNext(this); -->
    <Or>
      <Class name="~com\.jgalgo\.internal\.ds\.[a-zA-Z]*BinarySearchTrees\$BSTIterator" />
      <Class name="com.jgalgo.internal.ds.HeapBinary$It" />
      <Class name="com.jgalgo.alg.MatchingWeightedGabow1990Abstract$Blossom$1$1" />
      <Class name="com.jgalgo.alg.MatchingWeightedGabow1990Abstract$Worker$1" />
      <Class name="com.jgalgo.alg.MatchingWeightedGabow1990Abstract$Worker$2" />
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Blossom$1$1" />
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Blossom$2$1" />
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Tree$1$1" />
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Tree$2$1" />
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Worker$2$1" />
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Worker$3$1" />
      <Class name="com.jgalgo.internal.util.IterTools$IterPeekableImpl" />
      <Class name="com.jgalgo.internal.util.JGAlgoUtils$NullIterator" />
      <Class name="com.jgalgo.internal.util.JGAlgoUtils$NullListIterator" />
      <Class name="com.jgalgo.internal.util.JGAlgoUtils$PermutationsIter" />
      <Class name="com.jgalgo.internal.util.JGAlgoUtils$PermutationsIterInt" />
    </Or>
    <Method name="next" />
    <Bug pattern="IT_NO_SUCH_ELEMENT" />
  </Match>
  <Match>
    <!-- used when Debug=trues -->
    <Or>
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Debug" />
      <Class name="com.jgalgo.alg.MatchingWeightedBlossomV$Debug$Impl" />
    </Or>
    <Or>
      <Bug pattern="UC_USELESS_VOID_METHOD" />
      <Bug pattern="UUF_UNUSED_FIELD" />
    </Or>
  </Match>
  <Match>
    <!-- The immutable array set should not copy the array, it assumed the array will not be used
    again by the user -->
    <Class name="com.jgalgo.internal.util.ImmutableIntArraySet" />
    <Constructor />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Provided graph is input, not internal state of the generator -->
    <Class name="com.jgalgo.gen.LineGraphGenerator" />
    <Method name="graph" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Provided graph is input, not internal state of the generator -->
    <Class name="com.jgalgo.gen.ComplementGraphGenerator" />
    <Method name="graph" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Provided graphs are input, not internal state of the generator -->
    <Class name="com.jgalgo.gen.DifferenceGraphGenerator" />
    <Method name="graphs" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Provided graphs are input, not internal state of the generator -->
    <Class name="com.jgalgo.gen.SymmetricDifferenceGraphGenerator" />
    <Method name="graphs" />
    <Bug pattern="EI_EXPOSE_REP2" />
  </Match>
  <Match>
    <!-- Classes copied from fastutil -->
    <Or>
      <Class name="com.jgalgo.internal.util.IntImmutableList2" />
      <Class name="com.jgalgo.internal.util.IntImmutableList2$ImmutableSubList" />
    </Or>
    <Or>
      <Bug pattern="CN_IDIOM_NO_SUPER_CALL" />
      <Bug pattern="EI_EXPOSE_REP2" />
      <Bug pattern="HE_EQUALS_NO_HASHCODE" />
      <Bug pattern="RV_NEGATING_RESULT_OF_COMPARETO" />
      <Bug pattern="CO_SELF_NO_OBJECT" />
    </Or>
  </Match>
</FindBugsFilter>