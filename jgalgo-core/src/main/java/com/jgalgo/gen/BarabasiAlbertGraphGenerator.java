/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.jgalgo.gen;

import static com.jgalgo.internal.util.Range.range;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Random;
import com.jgalgo.graph.GraphBuilder;
import com.jgalgo.graph.GraphFactory;
import com.jgalgo.graph.IdBuilder;
import com.jgalgo.graph.IntGraph;
import com.jgalgo.graph.IntGraphBuilder;
import com.jgalgo.graph.IntGraphFactory;
import com.jgalgo.internal.util.JGAlgoUtils.Variant2;
import it.unimi.dsi.fastutil.ints.IntArrayList;
import it.unimi.dsi.fastutil.ints.IntObjectPair;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;

/**
 * Generates a Barabási–Albert graph.
 *
 * <p>
 * A Barabási–Albert graph is a random graph with a power law degree distribution, which is a good model for many real
 * networks. The graph begins with an initial clique of size {@code initCliqueSize}, and then adds vertices one by one,
 * each with {@code edgesPerStep} edges that are attached to existing vertices. The probability that a new vertex is
 * connected to vertex \(v\) is proportional to the degree of \(v\) divided by the sum of degrees of all vertices in the
 * graph.
 *
 * <p>
 * By default the initial clique size is \(20\) and the number of edges added each step is \(10\). The generated
 * graph(s) may be directed or undirected, and by default it is undirected. Self edges are never created.
 *
 * <p>
 * In the following example, an undirected graph with \(10\) vertices is generated. The initial clique size is \(3\),
 * and at each step \(4\) edges are added. The seed is set to some fixed value to get deterministic behavior.
 *
 * <pre> {@code
 * Graph<Integer, Integer> g = new BarabasiAlbertGraphGenerator<>(IntGraphFactory.undirected())
 * 		.directed(false)
 * 		.vertices(10)
 * 		.edges(IdBuilderInt.defaultBuilder())
 * 		.initialCliqueSize(3)
 * 		.edgesPerStep(4)
 * 		.seed(0x7d0c16fa09e05751L)
 * 		.generate();
 * } </pre>
 *
 * <p>
 * For deterministic behavior, set the seed of the generator using {@link #seed(long)}.
 *
 * <p>
 * Based on 'Emergence of scaling in random networks' by Albert-László Barabási and Réka Albert.
 *
 * @param  <V> the vertices type
 * @param  <E> the edges type
 * @author     Barak Ugav
 */
public class BarabasiAlbertGraphGenerator<V, E> implements GraphGenerator<V, E> {

	private final GraphFactory<V, E> factory;
	private Variant2<List<V>, IntObjectPair<IdBuilder<V>>> vertices;
	private IdBuilder<E> edgeBuilder;
	private int initCliqueSize = 20;
	private int edgesPerStep = 10;
	private boolean directed = false;
	private final Random rand = new Random();

	/**
	 * Create a new Barabasi-Albert graph generator that will use the default graph factory.
	 *
	 * <p>
	 * The default graph factory does not have vertex builder, so if only the number of vertices is set using
	 * {@link #vertices(int)}, the vertex builder must be set explicitly using
	 * {@code graphFactory().setVertexBuilder(...)}. Same holds for edges, for which the number of them is determine by
	 * {@link #edgesPerStep(int)} and {@link #initialCliqueSize(int)}. Alternatively, the methods
	 * {@link #vertices(int, IdBuilder)} and {@link #edges(IdBuilder)} can be used to set the number of vertices and
	 * provide a vertex/edge builder that will override the (maybe non existing) vertex/edge builder of the graph
	 * factory. The vertex set can also be set explicitly using {@link #vertices(Collection)}.
	 */
	public BarabasiAlbertGraphGenerator() {
		this(GraphFactory.undirected());
	}

	/**
	 * Create a new Barabasi-Albert graph generator that will use the given graph factory.
	 *
	 * <p>
	 * If the factory has a vertex builder it will be used to generate the vertices of the generated graph(s) if only
	 * the number of vertices is set using {@link #vertices(int)}. If the factory has an edge builder it will be used to
	 * generate the edges of the generated graph(s) if it will not be overridden by {@link #edges(IdBuilder)}.
	 *
	 * <p>
	 * During the graph(s) generation, the method {@link GraphFactory#setDirected(boolean)} of the given factory will be
	 * called to align the created graph with the generator configuration. Parallel edges can always be generated by
	 * this generator, therefore also {@link GraphFactory#allowParallelEdges()} will be called.
	 *
	 * <p>
	 * To generate {@linkplain IntGraph int graphs}, pass an instance of {@linkplain IntGraphFactory} to this
	 * constructor.
	 *
	 * @param factory the graph factory that will be used to create the generated graph(s)
	 */
	public BarabasiAlbertGraphGenerator(GraphFactory<V, E> factory) {
		this.factory = Objects.requireNonNull(factory);
	}

	/**
	 * Get the graph factory that will be used to create the generated graph(s).
	 *
	 * <p>
	 * It's possible to customize the factory before generating the graph(s), for example by using
	 * {@link GraphFactory#addHint(GraphFactory.Hint)} to optimize the generated graph(s) for a specific algorithm. If
	 * the factory has a vertex builder it will be used to generate the vertices of the generated graph(s) if only the
	 * number of vertices is set using {@link #vertices(int)}. If the factory has an edge builder it will be used to
	 * generate the edges of the generated graph(s) if it will not be overridden by {@link #edges(IdBuilder)}.
	 *
	 * <p>
	 * During the graph(s) generation, the method {@link GraphFactory#setDirected(boolean)} of the given factory will be
	 * called to align the created graph with the generator configuration. Parallel edges can always be generated by
	 * this generator, therefore also {@link GraphFactory#allowParallelEdges()} will be called.
	 *
	 * @return the graph factory that will be used to create the generated graph(s)
	 */
	public GraphFactory<V, E> graphFactory() {
		return factory;
	}

	/**
	 * Set the vertices set of the generated graph(s).
	 *
	 * <p>
	 * If the generator is used to generate multiple graphs, the same vertex set will be used for all of them. This
	 * method override all previous calls to any of {@link #vertices(Collection)}, {@link #vertices(int)} or
	 * {@link #vertices(int, IdBuilder)}.
	 *
	 * @param  vertices the vertices set
	 * @return          this generator
	 */
	@SuppressWarnings("unchecked")
	public BarabasiAlbertGraphGenerator<V, E> vertices(Collection<? extends V> vertices) {
		if (factory instanceof IntGraphFactory) {
			vertices = (List<V>) new IntArrayList((Collection<Integer>) vertices);
		} else {
			vertices = new ObjectArrayList<>(vertices);
		}
		this.vertices = Variant2.ofA((List<V>) vertices);
		return this;
	}

	/**
	 * Set the number of vertices that will be generated for each graph.
	 *
	 * <p>
	 * The vertices will be generated using the vertex builder of the graph factory, see
	 * {@link GraphFactory#setVertexBuilder(IdBuilder)}. The default graph factory does not have a vertex builder, so it
	 * must be set explicitly, or {@link IntGraphFactory}, which does have such builder, should be passed in the
	 * {@linkplain #BarabasiAlbertGraphGenerator(GraphFactory) constructor}. Another alternative is to use
	 * {@link #vertices(int, IdBuilder)} which set the number of vertices and provide a vertex builder that will
	 * override the (maybe non existing) vertex builder of the graph factory. The generation will happen independently
	 * for each graph generated. If there is no vertex builder, an exception will be thrown during generation. This
	 * method override all previous calls to any of {@link #vertices(Collection)}, {@link #vertices(int)} or
	 * {@link #vertices(int, IdBuilder)}.
	 *
	 * @param  verticesNum              the number of vertices that will be generated for each graph
	 * @return                          this generator
	 * @throws IllegalArgumentException if {@code verticesNum} is negative
	 */
	public BarabasiAlbertGraphGenerator<V, E> vertices(int verticesNum) {
		vertices(verticesNum, null);
		return this;
	}

	/**
	 * Set the number of vertices that will be generated for each graph, and the vertex builder that will be used to
	 * generate them.
	 *
	 * <p>
	 * The vertices will be generated using the provided vertex builder, and the vertex generator provided by the
	 * {@linkplain #graphFactory() graph factory} (if exists) will be ignored. The generation will happen independently
	 * for each graph generated. This method override all previous calls to any of {@link #vertices(Collection)},
	 * {@link #vertices(int)} or {@link #vertices(int, IdBuilder)}.
	 *
	 * @param  verticesNum              the number of vertices that will be generated for each graph
	 * @param  vertexBuilder            the vertex builder, or {@code null} to use the vertex builder of the
	 *                                      {@linkplain #graphFactory() graph factory}
	 * @return                          this generator
	 * @throws IllegalArgumentException if {@code verticesNum} is negative
	 */
	public BarabasiAlbertGraphGenerator<V, E> vertices(int verticesNum, IdBuilder<V> vertexBuilder) {
		if (verticesNum < 0)
			throw new IllegalArgumentException("number of vertices must be non-negative");
		this.vertices = Variant2.ofB(IntObjectPair.of(verticesNum, vertexBuilder));
		return this;
	}

	/**
	 * Set the edge builder that will be used to generate edges.
	 *
	 * <p>
	 * The edges will be generated using the provided edge builder, and the edge generator provided by the
	 * {@linkplain #graphFactory() graph factory} (if exists) will be ignored. The generation will happen independently
	 * for each graph generated. If this method is not called, or called with a {@code null} argument, the edge builder
	 * of the graph factory will be used. If the graph factory does not have an edge builder, an exception will be
	 * thrown during generation.
	 *
	 * @param  edgeBuilder the edge builder, or {@code null} to use the edge builder of the {@linkplain #graphFactory()
	 *                         graph factory}
	 * @return             this generator
	 */
	public BarabasiAlbertGraphGenerator<V, E> edges(IdBuilder<E> edgeBuilder) {
		this.edgeBuilder = edgeBuilder;
		return this;
	}

	/**
	 * Set the initial clique size of the generated graph(s).
	 *
	 * <p>
	 * The initial clique is a complete graph of size {@code initCliqueSize}. After the initial clique is created, the
	 * generator adds vertices one by one, each with {@code edgesPerStep} edges that are attached to existing vertices.
	 * The probability that a new vertex is connected to vertex \(v\) is proportional to the degree of \(v\) divided by
	 * the sum of degrees of all vertices in the graph.
	 *
	 * <p>
	 * By default, the initial clique size is \(20\). The initial clique size must not be greater than the number of
	 * vertices, which is validated during the graph generation.
	 *
	 * @param  initCliqueSize the initial clique size
	 * @return                this generator
	 */
	public BarabasiAlbertGraphGenerator<V, E> initialCliqueSize(int initCliqueSize) {
		if (initCliqueSize < 0)
			throw new IllegalArgumentException("initCliqueSize must be non-negative: " + initCliqueSize);
		this.initCliqueSize = initCliqueSize;
		return this;
	}

	/**
	 * Set the number of edges added each step when generated graph(s).
	 *
	 * <p>
	 * The initial clique is a complete graph of size {@link #initialCliqueSize(int)}. After the initial clique is
	 * created, the generator adds vertices one by one, each with {@code edgesPerStep} edges that are attached to
	 * existing vertices. The probability that a new vertex is connected to vertex \(v\) is proportional to the degree
	 * of \(v\) divided by the sum of degrees of all vertices in the graph.
	 *
	 * <p>
	 * By default, the number of edges added per step is \(10\). The number of edges per step must not be greater than
	 * the initial clique size provided by {@link #initialCliqueSize(int)}.
	 *
	 * @param  edgesPerStep the number of edges added to each vertex added to the graph after the initial clique
	 * @return              this generator
	 */
	public BarabasiAlbertGraphGenerator<V, E> edgesPerStep(int edgesPerStep) {
		if (edgesPerStep < 0)
			throw new IllegalArgumentException("edges per step must be non-negative: " + edgesPerStep);
		this.edgesPerStep = edgesPerStep;
		return this;
	}

	/**
	 * Determine if the generated graph(s) is directed or undirected.
	 *
	 * <p>
	 * By default, the generated graph(s) is undirected.
	 *
	 * @param  directed {@code true} if the generated graph(s) will be directed, {@code false} if undirected
	 * @return          this generator
	 */
	public BarabasiAlbertGraphGenerator<V, E> directed(boolean directed) {
		this.directed = directed;
		return this;
	}

	/**
	 * Set the seed of the random number generator used to generate the graph(s).
	 *
	 * <p>
	 * By default, a random seed is used. For deterministic behavior, set the seed of the generator.
	 *
	 * @param  seed the seed of the random number generator
	 * @return      this generator
	 */
	public BarabasiAlbertGraphGenerator<V, E> seed(long seed) {
		rand.setSeed(seed);
		return this;
	}

	@Override
	public GraphBuilder<V, E> generateIntoBuilder() {
		if (vertices == null)
			throw new IllegalStateException("Vertices not set");
		final int n = vertices.map(List::size, IntObjectPair::firstInt).intValue();
		if (initCliqueSize > n)
			throw new IllegalStateException(
					"initCliqueSize must be smaller than vertices num: " + initCliqueSize + " > " + n);
		if (edgesPerStep > initCliqueSize)
			throw new IllegalStateException(
					"k must be smaller than initCliqueSize: " + edgesPerStep + " > " + initCliqueSize);

		GraphBuilder<V, E> g = factory.setDirected(directed).allowParallelEdges().newBuilder();
		IdBuilder<E> edgeBuilder = this.edgeBuilder != null ? this.edgeBuilder : g.edgeBuilder();
		if (edgeBuilder == null)
			throw new IllegalStateException("Edge builder not provided and graph factory does not have one");

		final List<V> vertices;
		if (this.vertices.contains(List.class)) {
			@SuppressWarnings("unchecked")
			List<V> vertices0 = this.vertices.get(List.class);
			g.addVertices(vertices = vertices0);
		} else {
			@SuppressWarnings("unchecked")
			IntObjectPair<IdBuilder<V>> p = this.vertices.get(IntObjectPair.class);
			int verticesNum = p.firstInt();
			IdBuilder<V> vertexBuilder = p.second() != null ? p.second() : g.vertexBuilder();
			if (vertexBuilder == null)
				throw new IllegalStateException("Vertex builder not provided and graph factory does not have one");
			if (g instanceof IntGraphBuilder) {
				@SuppressWarnings("unchecked")
				List<V> vertices0 = (List<V>) new IntArrayList(verticesNum);
				vertices = vertices0;
			} else {
				vertices = new ObjectArrayList<>(verticesNum);
			}
			g.ensureVertexCapacity(verticesNum);
			for (int i = 0; i < verticesNum; i++) {
				V vertex = vertexBuilder.build(g.vertices());
				g.addVertex(vertex);
				vertices.add(vertex);
			}
		}

		int initEdgesNum = initCliqueSize * (initCliqueSize - 1) / (directed ? 1 : 2);
		int addedEdgesNum = (n - initCliqueSize) * edgesPerStep;
		int[] endpoints = new int[(initEdgesNum + addedEdgesNum) * 2];
		int edgeNum = 0;

		/* start with a complete graph of size initCliqueSize */
		for (int u : range(initCliqueSize)) {
			if (directed) {
				for (int v : range(u)) {
					int e = edgeNum++;
					endpoints[e * 2 + 0] = u;
					endpoints[e * 2 + 1] = v;
				}
			}
			for (int v : range(u + 1, initCliqueSize)) {
				int e = edgeNum++;
				endpoints[e * 2 + 0] = u;
				endpoints[e * 2 + 1] = v;
			}
		}

		/* add n-initCliqueSize vertices, each with m edges */
		for (int vNum : range(initCliqueSize, n)) {
			final int edgeNumAtStart = edgeNum;
			final int u = vNum;
			for (int i = 0; i < edgesPerStep; i++) {
				/* by sampling from the current endpoints, we sample a vertex with prob of its degree */
				int v = endpoints[rand.nextInt(edgeNumAtStart * 2)];
				int e = edgeNum++;
				int u0, v0;
				if (directed && rand.nextBoolean()) {
					u0 = u;
					v0 = v;
				} else {
					u0 = v;
					v0 = u;
				}
				endpoints[e * 2 + 0] = u0;
				endpoints[e * 2 + 1] = v0;
			}
		}

		g.ensureEdgeCapacity(edgeNum);
		for (int eIdx : range(edgeNum)) {
			V u = vertices.get(endpoints[eIdx * 2 + 0]);
			V v = vertices.get(endpoints[eIdx * 2 + 1]);
			g.addEdge(u, v, edgeBuilder.build(g.edges()));
		}
		return g;
	}

}
