/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.graph;

/**
 * Specific weights of {@code PRIMITIVE_TYPE_REAL}.
 *
 * @param  <K> the elements (vertices/edges) type
#if PRIMITIVE_TYPE_REAL == "Object"
 * @param  <T> the weights type
#endif
 * @author Barak Ugav
 */
public interface WEIGHTS<K TYPE_GENERIC_IN_TEMPLATE_LIST> extends Weights<K, TYPE_GENERIC_CLASS>
#if PRIMITIVE_TYPE in ["byte", "short", "int"]
, WeightFunctionInt<K>
#elif PRIMITIVE_TYPE in ["long", "float", "double"]
, WeightFunction<K>
#endif
{

	/**
	 * Get the weight associated with the given element.
	 *
	 * @param  element an element (edge/vertex).
	 * @return    the weight associated with the given element.
	 */
	public PRIMITIVE_TYPE get(K element);

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #get(Object)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default TYPE_GENERIC_CLASS getAsObj(K element) {
		return PRIMITIVE_TO_BOXED(get(element));
	}

	/**
	 * Set the weight associated with the given element.
	 *
	 * @param  element an element (edge/vertex).
	 * @param weight new weight that will be associated with the given element
	 */
	public void set(K element, PRIMITIVE_TYPE weight);

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #set(Object, PRIMITIVE_TYPE_REAL)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default void setAsObj(K element, TYPE_GENERIC_CLASS weight) {
		set(element, BOXED_TO_PRIMITIVE(weight));
	}

	/**
	 * Get the default weight of this weights container.
     *
	 * <p>
	 * The default weight is the weight associated with all elements that were not explicitly set using
	 * {@link #set(Object, PRIMITIVE_TYPE_REAL)}.
	 *
	 * @return the default weight of this weights container.
	 */
	public PRIMITIVE_TYPE defaultWeight();

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #defaultWeight()} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default TYPE_GENERIC_CLASS defaultWeightAsObj() {
		return PRIMITIVE_TO_BOXED(defaultWeight());
	}

#if PRIMITIVE_TYPE in ["byte", "short", "int"]
	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * Implement the {@link WeightFunctionInt} interface by using the weights of the container.
	 */
	@Override
	default int weightInt(K element) {
		return get(element);
	}

#elif PRIMITIVE_TYPE in ["long", "float", "double"]
	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * Implement the {@link WeightFunction} interface by using the weights of the container.
	 */
	@Override
	default double weight(K element) {
		return get(element);
	}

#endif
}
