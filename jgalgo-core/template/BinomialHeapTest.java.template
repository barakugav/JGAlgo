/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import com.jgalgo.internal.util.TestBase;
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import com.jgalgo.internal.util.JGAlgoUtils;
import java.util.Comparator;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif

public class BINOMIAL_HEAP_TEST extends TestBase {

#if PRIMITIVE_KEY_TYPE_REAL == "Object"
			@SuppressWarnings("unchecked")
#endif
	private static ReferenceableHeap.Builder heapBuilder() {
		return (keyType, valueType, comparator) -> {
			if (keyType == PRIMITIVE_KEY_TYPE_REAL.class && valueType == PRIMITIVE_VALUE_TYPE_REAL.class)
				return new BINOMIAL_HEAP KEY_VALUE_GENERIC_EMPTY((KEY_COMPARATOR KEY_TYPE_GENERIC) comparator);
			throw new UnsupportedOperationException("Unsupported heap type: " + keyType + ", " + valueType);
		};
	}

	@Test
	public void testRandOpsDefaultCompare() {
		final long seed = 0x0600b0c18d6d97d4L;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testRandOpsCustomCompare() {
		final long seed = 0xe71c7e9f2765e4eaL;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testRandOpsAfterManyInserts() {
		final long seed = 0x55bb8b5e3f70d05aL;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsAfterManyInserts(heapBuilder(), seed);
	}

	@Test
	public void testMeldDefaultCompare() {
		final long seed = 0x98473460a5541235L;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testMeldCustomCompare() {
		final long seed = 0xbc597576efd52ccfL;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testDecreaseKeyDefaultCompare() {
		final long seed = 0x553462f097149dc1L;
		REFERENCEABLE_HEAP_TEST_UTILS.testDecreaseKeyDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testDecreaseKeyCustomCompare() {
		final long seed = 0xd7d8cf9389480696L;
		REFERENCEABLE_HEAP_TEST_UTILS.testDecreaseKeyCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void meldWithDifferentImpl() {
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h1 = new BINOMIAL_HEAP KEY_VALUE_GENERIC_EMPTY(null);
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h2 = new PAIRING_HEAP KEY_VALUE_GENERIC_EMPTY(null);
		assertThrows(IllegalArgumentException.class, () -> h1.meld(h2));
	}

	@Test
	public void meldWithDifferentComparator() {
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h1 = new BINOMIAL_HEAP KEY_VALUE_GENERIC_EMPTY(null);
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h2 = new BINOMIAL_HEAP KEY_VALUE_GENERIC_EMPTY((x1, x2) -> -COMPARE_KEY_DEFAULT(x1, x2));
		assertThrows(IllegalArgumentException.class, () -> h1.meld(h2));
	}

	@Test
	public void meldWithSelf() {
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h1 = new BINOMIAL_HEAP KEY_VALUE_GENERIC_EMPTY(null);
		assertThrows(IllegalArgumentException.class, () -> h1.meld(h1));
	}

}
