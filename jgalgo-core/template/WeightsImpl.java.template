/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.graph;

import static com.jgalgo.internal.util.Range.range;
import java.util.Arrays;
#if PRIMITIVE_TYPE_REAL != "boolean"
import FASTUTIL_PACKAGE.FASTUTIL_TYPEArrays;
#else
import it.unimi.dsi.fastutil.longs.LongArrays;
#endif
import it.unimi.dsi.fastutil.ints.IntSet;

class WEIGHTS_IMPL {

	private WEIGHTS_IMPL() {}

	abstract static class IndexImpl TYPE_GENERIC extends WeightsImpl.IndexAbstract<TYPE_GENERIC_CLASS> implements IWEIGHTS TYPE_GENERIC {

#if PRIMITIVE_TYPE_REAL != "boolean"
		PRIMITIVE_TYPE_REAL[] weights;
#else
		long[] weights;
#endif
		final PRIMITIVE_TYPE defaultWeight;

#if PRIMITIVE_TYPE_REAL == "boolean"
		static final int WordSize = Long.SIZE;
#endif

		IndexImpl(IntSet elements, boolean isVertices, PRIMITIVE_TYPE defVal) {
			super(elements, isVertices);
			defaultWeight = defVal;
#if PRIMITIVE_TYPE_REAL != "boolean"
			weights = FASTUTIL_TYPEArrays.EMPTY_ARRAY;
			if (!elements.isEmpty()) {
				weights = new PRIMITIVE_TYPE_REAL[elements.size()];
				Arrays.fill(weights, defaultWeight);
			}
#else
			weights = LongArrays.EMPTY_ARRAY;
			if (!elements.isEmpty()) {
				weights = new long[wordsNum(elements.size())];
				if (defaultWeight)
					Arrays.fill(weights, ~0L);
			}
#endif
		}

		IndexImpl(IWEIGHTS TYPE_GENERIC orig, IntSet elements, boolean isVertices) {
			super(elements, isVertices);
			defaultWeight = orig.defaultWeight();
			final int n = elements.size();

			if (orig instanceof WEIGHTS_IMPL.IndexImpl) {
				WEIGHTS_IMPL.IndexImpl TYPE_GENERIC orig0 = (WEIGHTS_IMPL.IndexImpl TYPE_GENERIC) orig;
				WeightsImpl.checkSameSize(elements, orig0.elements);
#if PRIMITIVE_TYPE_REAL != "boolean"
				weights = Arrays.copyOf(orig0.weights, n);

#else
				weights = Arrays.copyOf(orig0.weights, wordsNum(n));
#endif
			} else {
#if PRIMITIVE_TYPE_REAL != "boolean"
				weights = FASTUTIL_TYPEArrays.EMPTY_ARRAY;
#else
				weights = LongArrays.EMPTY_ARRAY;
#endif
				if (n > 0) {
#if PRIMITIVE_TYPE_REAL != "boolean"
					weights = new PRIMITIVE_TYPE_REAL[n];
					for (int i : range(n))
						weights[i] = orig.get(i);
#else
					weights = new long[wordsNum(n)];
					if (defaultWeight)
						weights[weights.length - 1] = ~0L;
					for (int i : range(n))
						setImpl(i, orig.get(i));
#endif
				}
			}
		}

		IndexImpl(IWEIGHTS TYPE_GENERIC orig, IntSet elements, boolean isVertices, IndexGraphBuilder.ReIndexingMap reIndexMap) {
			super(elements, isVertices);
			defaultWeight = orig.defaultWeight();
			final int n = elements.size();
#if PRIMITIVE_TYPE_REAL != "boolean"
			weights = new PRIMITIVE_TYPE_REAL[n];

			if (orig instanceof WEIGHTS_IMPL.IndexImpl) {
				WEIGHTS_IMPL.IndexImpl TYPE_GENERIC orig0 = (WEIGHTS_IMPL.IndexImpl TYPE_GENERIC) orig;
				WeightsImpl.checkSameSize(elements, orig0.elements);
				for (int oldIdx : range(n))
					weights[reIndexMap.map(oldIdx)] = orig0.weights[oldIdx];
			} else {
				for (int oldIdx : range(n))
					weights[reIndexMap.map(oldIdx)] = orig.get(oldIdx);
			}
#else
			weights = new long[wordsNum(n)];
			if (defaultWeight)
				Arrays.fill(weights, ~0L);

			if (orig instanceof WEIGHTS_IMPL.IndexImpl) {
				WEIGHTS_IMPL.IndexImpl TYPE_GENERIC orig0 = (WEIGHTS_IMPL.IndexImpl TYPE_GENERIC) orig;
				if (defaultWeight) {
					for (int oldIdx : range(n))
						if ((orig0.weights[word(oldIdx)] & bit(oldIdx)) == 0)
							setImpl(reIndexMap.map(oldIdx), false);
				} else {
					for (int oldIdx : range(n))
						if ((orig0.weights[word(oldIdx)] & bit(oldIdx)) != 0)
							setImpl(reIndexMap.map(oldIdx), true);
				}
			} else {
				if (defaultWeight) {
					for (int oldIdx : range(n))
						if (!orig.get(oldIdx))
							setImpl(reIndexMap.map(oldIdx), false);
				} else {
					for (int oldIdx : range(n))
						if (orig.get(oldIdx))
							setImpl(reIndexMap.map(oldIdx), true);
				}
			}
#endif
		}

		SUPPRESS_WARNINGS_UNCHECKED
		@Override
		public PRIMITIVE_TYPE get(int idx) {
			checkIdx(idx);
#if PRIMITIVE_TYPE_REAL != "boolean"
			return CAST_TO_GENERIC weights[idx];
#else
			return (weights[word(idx)] & bit(idx)) != 0;
#endif
		}

		@Override
		public PRIMITIVE_TYPE defaultWeight() {
			return defaultWeight;
		}

#if PRIMITIVE_TYPE_REAL == "boolean"
		static int word(int idx) {
			return idx / WordSize;
		}

		static long bit(int idx) {
			return 1L << (idx % WordSize);
		}

		static int wordsNum(int size) {
			return (size + WordSize - 1) / WordSize;
		}

		void setImpl(int idx, boolean weight) {
			if (weight) {
				weights[word(idx)] |= bit(idx);
			} else {
				weights[word(idx)] &= ~bit(idx);
			}
		}
#endif
	}

	static class IndexImmutable TYPE_GENERIC extends WEIGHTS_IMPL.IndexImpl TYPE_GENERIC implements WeightsImpl.IndexImmutable<TYPE_GENERIC_CLASS> {

		IndexImmutable(IWEIGHTS TYPE_GENERIC orig, IntSet elements, boolean isVertices) {
			super(orig, elements, isVertices);
		}

		IndexImmutable(IWEIGHTS TYPE_GENERIC orig, IntSet elements, boolean isVertices, IndexGraphBuilder.ReIndexingMap reIndexMap) {
			super(orig, elements, isVertices, reIndexMap);
		}

		@Override
		public void set(int idx, PRIMITIVE_TYPE weight) {
			throw new UnsupportedOperationException("immutable weights");
		}
	}

	static class IndexMutable TYPE_GENERIC extends WEIGHTS_IMPL.IndexImpl TYPE_GENERIC implements WeightsImpl.IndexMutable<TYPE_GENERIC_CLASS> {

		IndexMutable(IntSet elements, boolean isVertices, PRIMITIVE_TYPE defVal) {
			super(elements, isVertices, defVal);
		}

		IndexMutable(IWEIGHTS TYPE_GENERIC orig, IntSet elements, boolean isVertices) {
			super(orig, elements, isVertices);
		}

		@Override
		public void set(int idx, PRIMITIVE_TYPE weight) {
			checkIdx(idx);
#if PRIMITIVE_TYPE_REAL != "boolean"
			weights[idx] = weight;
#else
			setImpl(idx, weight);
#endif
		}

		@Override
		public int capacity() {
#if PRIMITIVE_TYPE_REAL != "boolean"
			return weights.length;
#else
			return weights.length * WordSize;
#endif
		}

		@Override
		public void expand(int newCapacity) {
			int oldCapacity = capacity();
#if PRIMITIVE_TYPE_REAL != "boolean"
			assert oldCapacity < newCapacity;
			weights = Arrays.copyOf(weights, newCapacity);
			Arrays.fill(weights, oldCapacity, newCapacity, defaultWeight);
#else
			if (oldCapacity >= newCapacity)
				return;
			weights = Arrays.copyOf(weights, wordsNum(newCapacity));
			if (defaultWeight)
				Arrays.fill(weights, oldCapacity / WordSize, weights.length, ~0L);
#endif
		}

		@Override
		public void swapAndClear(int removedIdx, int swappedIdx) {
			// checkIdx(removedIdx);
			// checkIdx(swappedIdx);
#if PRIMITIVE_TYPE_REAL != "boolean"
			weights[removedIdx] = weights[swappedIdx];
			weights[swappedIdx] = defaultWeight;
#else
			setImpl(removedIdx, (weights[word(swappedIdx)] & bit(swappedIdx)) != 0);
			setImpl(swappedIdx, defaultWeight);
#endif
		}

		@Override
		public void clear(int idx) {
#if PRIMITIVE_TYPE_REAL != "boolean"
			weights[idx] = defaultWeight;
#else
			setImpl(idx, defaultWeight);
#endif
		}

		@Override
		public void clear() {
#if PRIMITIVE_TYPE_REAL != "boolean"
			Arrays.fill(weights, 0, size(), defaultWeight);
#else
			Arrays.fill(weights, 0, wordsNum(size()), defaultWeight ? ~0L : 0);
#endif
		}
	}

	static class IntMapped TYPE_GENERIC extends WeightsImpl.IntMapped<TYPE_GENERIC_CLASS> implements IWEIGHTS TYPE_GENERIC {
		IntMapped(IWEIGHTS TYPE_GENERIC weights, IndexIntIdMap indexMap) {
			super(weights, indexMap);
		}

		@Override
		public IWEIGHTS TYPE_GENERIC weights() {
			return (IWEIGHTS TYPE_GENERIC) super.weights();
		}

		@Override
		public PRIMITIVE_TYPE get(int id) {
			return weights().get(indexMap.idToIndex(id));
		}

		@Override
		public void set(int id, PRIMITIVE_TYPE weight) {
			weights().set(indexMap.idToIndex(id), weight);
		}

		@Override
		public PRIMITIVE_TYPE defaultWeight() {
			return weights().defaultWeight();
		}
	}

	static class ObjMapped<K TYPE_GENERIC_IN_TEMPLATE_LIST> extends WeightsImpl.ObjMapped<K, TYPE_GENERIC_CLASS> implements WEIGHTS<K TYPE_GENERIC_IN_TEMPLATE_LIST> {
		ObjMapped(IWEIGHTS TYPE_GENERIC weights, IndexIdMap<K> indexMap) {
			super(weights, indexMap);
		}

		@Override
		public IWEIGHTS TYPE_GENERIC weights() {
			return (IWEIGHTS TYPE_GENERIC) super.weights();
		}

		@Override
		public PRIMITIVE_TYPE get(K id) {
			return weights().get(indexMap.idToIndex(id));
		}

		@Override
		public void set(K id, PRIMITIVE_TYPE weight) {
			weights().set(indexMap.idToIndex(id), weight);
		}

		@Override
		public PRIMITIVE_TYPE defaultWeight() {
			return weights().defaultWeight();
		}
	}

	static class IntImmutableView TYPE_GENERIC extends WeightsImpl.IntImmutableView<TYPE_GENERIC_CLASS> implements IWEIGHTS TYPE_GENERIC {
		IntImmutableView(IWEIGHTS TYPE_GENERIC w) {
			super(w);
		}

		@Override
		IWEIGHTS TYPE_GENERIC weights() {
			return (IWEIGHTS TYPE_GENERIC) super.weights();
		}

		@Override
		public PRIMITIVE_TYPE get(int id) {
			return weights().get(id);
		}

		@Override
		public void set(int id, PRIMITIVE_TYPE weight) {
			throw new UnsupportedOperationException("immutable weights");
		}

		@Override
		public PRIMITIVE_TYPE defaultWeight() {
			return weights().defaultWeight();
		}
	}

	static class ObjImmutableView<K TYPE_GENERIC_IN_TEMPLATE_LIST> extends WeightsImpl.ObjImmutableView<K, TYPE_GENERIC_CLASS> implements WEIGHTS <K TYPE_GENERIC_IN_TEMPLATE_LIST> {
		ObjImmutableView(WEIGHTS <K TYPE_GENERIC_IN_TEMPLATE_LIST> w) {
			super(w);
		}

		@Override
		WEIGHTS <K TYPE_GENERIC_IN_TEMPLATE_LIST> weights() {
			return (WEIGHTS <K TYPE_GENERIC_IN_TEMPLATE_LIST>) super.weights();
		}

		@Override
		public PRIMITIVE_TYPE get(K id) {
			return weights().get(id);
		}

		@Override
		public void set(K id, PRIMITIVE_TYPE weight) {
			throw new UnsupportedOperationException("immutable weights");
		}

		@Override
		public PRIMITIVE_TYPE defaultWeight() {
			return weights().defaultWeight();
		}
	}

}
