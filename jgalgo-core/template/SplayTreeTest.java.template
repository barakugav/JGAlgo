/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import com.jgalgo.internal.util.TestBase;
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import com.jgalgo.internal.util.JGAlgoUtils;
import java.util.Comparator;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif

public class SPLAY_TREE_TEST extends TestBase {

#if PRIMITIVE_KEY_TYPE_REAL == "Object"
			@SuppressWarnings("unchecked")
#endif
	private static ReferenceableHeap.Builder heapBuilder() {
		return (keyType, valueType, comparator) -> {
			if (keyType == PRIMITIVE_KEY_TYPE_REAL.class && valueType == PRIMITIVE_VALUE_TYPE_REAL.class)
				return new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY((KEY_COMPARATOR KEY_TYPE_GENERIC) comparator);
			throw new UnsupportedOperationException("Unsupported heap type: " + keyType + ", " + valueType);
		};
	}

	@Test
	public void testRandOpsDefaultCompare() {
		final long seed = 0x29080f5f2aca1605L;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testRandOpsCustomCompare() {
		final long seed = 0xa92d44b8205fbbdeL;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testRandOpsAfterManyInserts() {
		final long seed = 0x38f7e3242f52e2dcL;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsAfterManyInserts(heapBuilder(), seed);
	}

	@Test
	public void testExtractMax() {
		final long seed = 0xb6921b23fa734769L;
		BINARY_SEARCH_TREE_TEST_UTILS.testExtractMax(heapBuilder(), seed);
	}

	@Test
	public void testMeldDefaultCompare() {
		final long seed = 0xe882a11221a54a22L;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testMeldCustomCompare() {
		final long seed = 0xfeab1714f2e57cd4L;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testMeldWithOrderDefaultCompare() {
		final long seed = 0x0cb4bf9251d8145bL;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldWithOrderedValuesDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testMeldWithOrderCustomCompare() {
		final long seed = 0x24c1f56e5fdbc5acL;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldWithOrderedValuesCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testSplitDefaultCompare() {
		final long seed = 0x353e23967b348089L;
		BINARY_SEARCH_TREE_TEST_UTILS.testSplitDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testSplitCustomCompare() {
		final long seed = 0x40b238cf34d778c0L;
		BINARY_SEARCH_TREE_TEST_UTILS.testSplitCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testDecreaseKeyDefaultCompare() {
		final long seed = 0x2e6a8902f634f8caL;
		REFERENCEABLE_HEAP_TEST_UTILS.testDecreaseKeyDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testDecreaseKeyCustomCompare() {
		final long seed = 0xb1db9f0001ff6a5aL;
		REFERENCEABLE_HEAP_TEST_UTILS.testDecreaseKeyCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindSmallersDefaultCompare() {
		final long seed = 0x77f393a0a7508c84L;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindSmallerDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindSmallersCustomCompare() {
		final long seed = 0x99a37616f1023b0fL;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindSmallerCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindGreatersDefaultCompare() {
		final long seed = 0xf8ec8ed64600635fL;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindGreaterDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindGreaterCustomCompare() {
		final long seed = 0xf890218f3f5420a9L;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindGreaterCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetPredecessorDefaultCompare() {
		final long seed = 0x09395f66760a5c55L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetPredecessorsDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetPredecessorCustomCompare() {
		final long seed = 0x2f8fd18ab64a2b15L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetPredecessorsCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetSuccessorDefaultCompare() {
		final long seed = 0x7ec6e57911f958c1L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetSuccessorsDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetSuccessorCustomCompare() {
		final long seed = 0x782385e30e24c822L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetSuccessorsCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void meldWithDifferentImpl() {
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h1 = new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY(null);
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h2 = new PAIRING_HEAP KEY_VALUE_GENERIC_EMPTY(null);
		assertThrows(IllegalArgumentException.class, () -> h1.meld(h2));
	}

	@Test
	public void meldWithDifferentComparator() {
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h1 = new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY(null);
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h2 = new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY((x1, x2) -> -COMPARE_KEY_DEFAULT(x1, x2));
		assertThrows(IllegalArgumentException.class, () -> h1.meld(h2));
	}

	@Test
	public void meldWithSelf() {
		REFERENCEABLE_HEAP KEY_VALUE_GENERIC h1 = new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY(null);
		assertThrows(IllegalArgumentException.class, () -> h1.meld(h1));
	}

}
