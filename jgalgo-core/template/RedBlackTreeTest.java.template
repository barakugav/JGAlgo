/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;
import com.jgalgo.internal.util.TestBase;
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import java.util.Comparator;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif

public class RED_BLACK_TREE_TEST extends TestBase {

#if PRIMITIVE_KEY_TYPE_REAL == "Object"
			@SuppressWarnings("unchecked")
#endif
	private static ReferenceableHeap.Builder heapBuilder() {
		return (keyType, valueType, comparator) -> {
			if (keyType == PRIMITIVE_KEY_TYPE_REAL.class && valueType == PRIMITIVE_VALUE_TYPE_REAL.class)
				return new RED_BLACK_TREE KEY_VALUE_GENERIC_EMPTY((KEY_COMPARATOR KEY_TYPE_GENERIC) comparator);
			throw new UnsupportedOperationException("Unsupported heap type: " + keyType + ", " + valueType);
		};
	}

	@Test
	public void testRandOpsDefaultCompare() {
		final long seed = 0x445a02434b767d0fL;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testRandOpsCustomCompare() {
		final long seed = 0xdf0d20c96b18e76bL;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testRandOpsAfterManyInserts() {
		final long seed = 0xe00c6e6c7bbdf827L;
		REFERENCEABLE_HEAP_TEST_UTILS.testRandOpsAfterManyInserts(heapBuilder(), seed);
	}

	@Test
	public void testExtractMax() {
		final long seed = 0x51537cb2cbca4774L;
		BINARY_SEARCH_TREE_TEST_UTILS.testExtractMax(heapBuilder(), seed);
	}

	@Test
	public void testMeldDefaultCompare() {
		final long seed = 0x3fbbd70b1c035dedL;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testMeldCustomCompare() {
		final long seed = 0xb8f57d62b2818583L;
		REFERENCEABLE_HEAP_TEST_UTILS.testMeldCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testDecreaseKeyDefaultCompare() {
		final long seed = 0x3ad0758602c2f656L;
		REFERENCEABLE_HEAP_TEST_UTILS.testDecreaseKeyDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testDecreaseKeyCustomCompare() {
		final long seed = 0x0edcd3dd97c5f867L;
		REFERENCEABLE_HEAP_TEST_UTILS.testDecreaseKeyCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindSmallersDefaultCompare() {
		final long seed = 0x4c57d0d410b7e9d6L;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindSmallerDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindSmallersCustomCompare() {
		final long seed = 0x73810ca9d38884ecL;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindSmallerCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindGreatersDefaultCompare() {
		final long seed = 0xec49fe38ca3ca19bL;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindGreaterDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testFindGreatersCustomCompare() {
		final long seed = 0x5939e3cdc2c3fb8fL;
		BINARY_SEARCH_TREE_TEST_UTILS.testFindGreaterCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetPredecessorDefaultCompare() {
		final long seed = 0x941838c5890fae32L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetPredecessorsDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetPredecessorCustomCompare() {
		final long seed = 0x6eec0c5157093ce4L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetPredecessorsCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetSuccessorDefaultCompare() {
		final long seed = 0xc68b22dd9e9afed9L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetSuccessorsDefaultCompare(heapBuilder(), seed);
	}

	@Test
	public void testGetSuccessorCustomCompare() {
		final long seed = 0x89f85333bcca14e0L;
		BINARY_SEARCH_TREE_TEST_UTILS.testGetSuccessorsCustomCompare(heapBuilder(), seed);
	}

	@Test
	public void testDefaultImpl() {
		assertEquals(RED_BLACK_TREE.class, BINARY_SEARCH_TREE.newInstance().getClass());
	}

}
