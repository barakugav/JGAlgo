/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import java.util.Comparator;
import com.jgalgo.internal.util.JGAlgoUtils;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif

class BINARY_SEARCH_TREES {

	private BINARY_SEARCH_TREES() {}

	static <KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> NodeT find(NodeT root, KEY_COMPARATOR KEY_TYPE_GENERIC c, PRIMITIVE_KEY_TYPE key) {
		return findOrNeighbor(root, c, key, BinarySearchTrees.NeighborType.None);
	}

	static <KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> NodeT findOrSmaller(NodeT root, KEY_COMPARATOR KEY_TYPE_GENERIC c, PRIMITIVE_KEY_TYPE key) {
		return findOrNeighbor(root, c, key, BinarySearchTrees.NeighborType.Predecessor);
	}

	static <KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> NodeT findOrGreater(NodeT root, KEY_COMPARATOR KEY_TYPE_GENERIC c, PRIMITIVE_KEY_TYPE key) {
		return findOrNeighbor(root, c, key, BinarySearchTrees.NeighborType.Successor);
	}

	private static <KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> NodeT findOrNeighbor(NodeT root, KEY_COMPARATOR KEY_TYPE_GENERIC c, PRIMITIVE_KEY_TYPE key,
			BinarySearchTrees.NeighborType neighborType) {
		if (root == null)
			return null;
		if (c == null) {
			for (NodeT p = root;;) {
				int cmp = COMPARE_KEY_DEFAULT(key, p.key);
				if (cmp < 0) {
					if (!p.hasLeftChild())
						return neighborType.onLeftChildMissing(p);
					p = p.left;
				} else if (cmp > 0) {
					if (!p.hasRightChild())
						return neighborType.onRightChildMissing(p);
					p = p.right;
				} else {
					return p;
				}
			}
		} else {
			for (NodeT p = root;;) {
				int cmp = c.compare(key, p.key);
				if (cmp < 0) {
					if (!p.hasLeftChild())
						return neighborType.onLeftChildMissing(p);
					p = p.left;
				} else if (cmp > 0) {
					if (!p.hasRightChild())
						return neighborType.onRightChildMissing(p);
					p = p.right;
				} else {
					return p;
				}
			}
		}
	}

	static <KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> NodeT findSmaller(NodeT root, KEY_COMPARATOR KEY_TYPE_GENERIC c, PRIMITIVE_KEY_TYPE key) {
		if (root == null)
			return null;
		if (c == null) {
			for (NodeT p = root;;) {
				int cmp = COMPARE_KEY_DEFAULT(key, p.key);
				if (cmp <= 0) {
					if (!p.hasLeftChild())
						return BinarySearchTrees.getPredecessor(p);
					p = p.left;
				} else {
					if (!p.hasRightChild())
						return p;
					p = p.right;
				}
			}
		} else {
			for (NodeT p = root;;) {
				int cmp = c.compare(key, p.key);
				if (cmp <= 0) {
					if (!p.hasLeftChild())
						return BinarySearchTrees.getPredecessor(p);
					p = p.left;
				} else {
					if (!p.hasRightChild())
						return p;
					p = p.right;
				}
			}
		}
	}

	static <KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> NodeT findGreater(NodeT root, KEY_COMPARATOR KEY_TYPE_GENERIC c, PRIMITIVE_KEY_TYPE key) {
		if (root == null)
			return null;
		if (c == null) {
			for (NodeT p = root;;) {
				int cmp = COMPARE_KEY_DEFAULT(key, p.key);
				if (cmp >= 0) {
					if (!p.hasRightChild())
						return BinarySearchTrees.getSuccessor(p);
					p = p.right;
				} else {
					if (!p.hasLeftChild())
						return p;
					p = p.left;
				}
			}
		} else {
			for (NodeT p = root;;) {
				int cmp = c.compare(key, p.key);
				if (cmp >= 0) {
					if (!p.hasRightChild())
						return BinarySearchTrees.getSuccessor(p);
					p = p.right;
				} else {
					if (!p.hasLeftChild())
						return p;
					p = p.left;
				}
			}
		}
	}

	static <KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> void insert(NodeT root, KEY_COMPARATOR KEY_TYPE_GENERIC c, NodeT n) {
		if (c == null) {
			for (NodeT parent = root;;) {
				int cmp = COMPARE_KEY_DEFAULT(n.key, parent.key);
				if (cmp <= 0) {
					if (!parent.hasLeftChild()) {
						parent.left = n;
						n.parent = parent;
						return;
					}
					parent = parent.left;
				} else {
					if (!parent.hasRightChild()) {
						parent.right = n;
						n.parent = parent;
						return;
					}
					parent = parent.right;
				}
			}
		} else {
			for (NodeT parent = root;;) {
				int cmp = c.compare(n.key, parent.key);
				if (cmp <= 0) {
					if (!parent.hasLeftChild()) {
						parent.left = n;
						n.parent = parent;
						return;
					}
					parent = parent.left;
				} else {
					if (!parent.hasRightChild()) {
						parent.right = n;
						n.parent = parent;
						return;
					}
					parent = parent.right;
				}
			}
		}
	}

	static class Node<KEY_GENERIC_LIST_START NodeT extends Node<KEY_GENERIC_LIST_START NodeT>> extends BinarySearchTrees.Node<NodeT> {
		PRIMITIVE_KEY_TYPE key;

		Node(PRIMITIVE_KEY_TYPE key) {
			this.key = key;
		}

#if PRIMITIVE_KEY_TYPE_REAL == "Object"
		@Override
		void clear() {
			super.clear();
			key = null;
		}
#endif

		@Override
		public String toString() {
			return String.valueOf(key);
		}
	}

}