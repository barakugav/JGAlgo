/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

import java.util.Arrays;
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import com.jgalgo.internal.util.JGAlgoUtils;
import java.util.Comparator;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif
import java.util.Iterator;
import com.jgalgo.internal.util.Assertions;

/**
 * A Fibonacci heap implementation.
 *
 * <p>
 * A pointer based heap implementation that support almost any operation in \(O(1)\) amortized time, except
 * {@link #remove} which takes \(O(\log n)\) time amortized.
 *
 * <p>
 * Using this heap, Dijkstra's shortest-path algorithm can be implemented in time \(O(m + n \log n)\) rather than \(O(m
 * \log n)\) as the {@link #decreaseKey} operation is performed in \(O(1)\) time amortized.
 *
 * <p>
 * In practice, the Fibonacci heaps are quite complex, and in some cases is better to use a Oairing heap.
 *
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
 * @param  <K> the keys type
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
 * @param  <V> the values type
#endif
 * @see        <a href="https://en.wikipedia.org/wiki/Fibonacci_heap">Wikipedia</a>
 * @author     Barak Ugav
 */
public class FIBONACCI_HEAP KEY_VALUE_GENERIC implements REFERENCEABLE_HEAP KEY_VALUE_GENERIC {

	private final KEY_COMPARATOR KEY_TYPE_GENERIC c;
	private Node KEY_VALUE_GENERIC minRoot;
	private Node KEY_VALUE_GENERIC begin;
	private Node KEY_VALUE_GENERIC end;
	private int size;

#if PRIMITIVE_KEY_TYPE_REAL == "Object" or PRIMITIVE_VALUE_TYPE_REAL == "Object"
	@SuppressWarnings("unchecked")
#endif
	private Node KEY_VALUE_GENERIC[] tempNodesArr = EmptyNodesArr;
#if PRIMITIVE_KEY_TYPE_REAL == "Object" or PRIMITIVE_VALUE_TYPE_REAL == "Object"
	@SuppressWarnings("rawtypes")
#endif
	private static final Node[] EmptyNodesArr = new Node[0];

	/**
	 * Constructs a new, empty Fibonacci heap, ordered according to the natural ordering of its keys.
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 *
	 * <p>
	 * All keys inserted into the heap must implement the {@link Comparable} interface. Furthermore, all such keys must
	 * be <i>mutually comparable</i>: {@code k1.compareTo(k2)} must not throw a {@code ClassCastException} for any keys
	 * {@code k1} and {@code k2} in the heap. If the user attempts to insert a key to the heap that violates this
	 * constraint (for example, the user attempts to insert a string element to a heap whose keys are integers), the
	 * {@code insert} call will throw a {@code ClassCastException}.
#endif
	 */
	public FIBONACCI_HEAP() {
		this(null);
	}

	/**
	 * Constructs a new, empty Fibonacci heap, with keys ordered according to the specified comparator.
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 *
	 * <p>
	 * All keys inserted into the heap must be <i>mutually comparable</i> by the specified comparator:
	 * {@code comparator.compare(k1, k2)} must not throw a {@code ClassCastException} for any keys {@code k1} and
	 * {@code k2} in the heap. If the user attempts to insert a key to the heap that violates this constraint, the
	 * {@code insert} call will throw a {@code ClassCastException}.
#endif
	 *
	 * @param comparator the comparator that will be used to order this heap. If {@code null}, the
	 *                       {@linkplain Comparable natural ordering} of the keys will be used.
	 */
	public FIBONACCI_HEAP(KEY_COMPARATOR KEY_TYPE_GENERIC comparator) {
		c = comparator;
	}

	@Override
	public KEY_COMPARATOR KEY_TYPE_GENERIC comparator() {
		return c;
	}

	@Override
	public void clear() {
		for (Node KEY_VALUE_GENERIC p = begin, next; p != null; p = next) {
			next = p.next;
			Trees.clear(p, n -> {
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
				n.key = null;
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
				n.value = null;
#endif
			});
		}

		begin = end = minRoot = null;
		size = 0;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public boolean isNotEmpty() {
		return size != 0;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC insert(PRIMITIVE_KEY_TYPE key) {
		Node KEY_VALUE_GENERIC n = new Node KEY_VALUE_GENERIC_EMPTY(key);
		if (minRoot != null) {
			Node KEY_VALUE_GENERIC last = end;
			last.next = n;
			n.prev = last;
			compareToMinRoot(n);
		} else {
			begin = n;
			minRoot = n;
		}
		end = n;
		size++;
		return n;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Iterator<HEAP_REFERENCE KEY_VALUE_GENERIC> iterator() {
		return (Iterator) new Trees.PreOrderIter<>(begin);
	}

	@Override
	public void meld(REFERENCEABLE_HEAP KEY_VALUE_GENERIC heap) {
		Assertions.Heaps.noMeldWithSelf(this, heap);
		Assertions.Heaps.meldWithSameImpl(FIBONACCI_HEAP.class, heap);
		Assertions.Heaps.equalComparatorBeforeMeld(comparator(), heap.comparator());
		FIBONACCI_HEAP KEY_VALUE_GENERIC h = (FIBONACCI_HEAP KEY_VALUE_GENERIC) heap;
		if (h.isEmpty())
			return;

		if (size == 0) {
			minRoot = h.minRoot;
			begin = h.begin;
			end = h.end;
		} else {
			end.next = h.begin;
			h.begin.prev = end;
			end = h.end;
			compareToMinRoot(h.minRoot);
		}
		size += h.size;

		h.begin = h.end = h.minRoot = null;
		h.size = 0;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findMin() {
		Assertions.Heaps.notEmpty(this);
		return minRoot;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC extractMin() {
		HEAP_REFERENCE KEY_VALUE_GENERIC min = findMin();
		remove(min);
		return min;
	}

	private static KEY_VALUE_GENERIC void cut(Node KEY_VALUE_GENERIC p) {
		assert p.parent != null;
		Node KEY_VALUE_GENERIC prev = p.prev;
		if (prev != null) {
			prev.next = p.next;
			p.prev = null;
		} else {
			assert p.parent.child == p;
			p.parent.child = p.next;
		}
		p.parent.degree--;
		if (p.next != null) {
			p.next.prev = prev;
			p.next = null;
		}
		p.parent = null;
		p.marked = false;
	}

	private void addRoot(Node KEY_VALUE_GENERIC p) {
		Node KEY_VALUE_GENERIC last = end;
		last.next = p;
		p.prev = last;
		end = p;
	}

	private void compareToMinRoot(Node KEY_VALUE_GENERIC p) {
		assert p.parent == null;
		if (c == null) {
			if (COMPARE_KEY_DEFAULT_GE(minRoot.key, p.key))
				minRoot = p;
		} else {
			if (c.compare(minRoot.key, p.key) > 0)
				minRoot = p;
		}
	}

	private void mark(Node KEY_VALUE_GENERIC p) {
		for (Node KEY_VALUE_GENERIC q; p.parent != null; p = q) {
			if (!p.marked) {
				p.marked = true;
				break;
			}
			q = p.parent;
			cut(p);
			addRoot(p);
		}
	}

	@Override
	public void decreaseKey(HEAP_REFERENCE KEY_VALUE_GENERIC ref, PRIMITIVE_KEY_TYPE newKey) {
		Node KEY_VALUE_GENERIC n = (Node KEY_VALUE_GENERIC) ref;
		Assertions.Heaps.decreaseKeyIsSmaller(n.key, newKey, c);
		n.key = newKey;

		Node KEY_VALUE_GENERIC parent = n.parent;
		if (parent == null) {
			compareToMinRoot(n);
			return;
		}
		if (c == null) {
			if (COMPARE_KEY_DEFAULT_GEQ(newKey, parent.key))
				return;
		} else {
			if (c.compare(newKey, parent.key) >= 0)
				return;
		}
		cut(n);
		addRoot(n);
		compareToMinRoot(n);
		mark(parent);
	}

	@Override
	public void remove(HEAP_REFERENCE KEY_VALUE_GENERIC ref) {
		Node KEY_VALUE_GENERIC prev, n = (Node KEY_VALUE_GENERIC) ref;

		final boolean isMinRoot = n == minRoot;
		if (n.parent != null) {
			Node KEY_VALUE_GENERIC parent = n.parent;
			cut(n);
			mark(parent);
		} else {
			if ((prev = n.prev) != null) {
				prev.next = n.next;
				n.prev = null;
			} else
				begin = n.next;
			if (n.next != null) {
				n.next.prev = prev;
				n.next = null;
			} else {
				end = prev;
			}
		}
		if (--size == 0) {
			minRoot = null;
			return;
		}

		// add n children
		Node KEY_VALUE_GENERIC first = n.child, last = null;
		if (first != null) {
			for (Node KEY_VALUE_GENERIC p = first;;) {
				p.parent = null;
				Node KEY_VALUE_GENERIC next = p.next;
				if (next == null) {
					last = p;
					break;
				}
				p = next;
			}

			if (end != null) {
				end.next = first;
				first.prev = end;
			} else {
				/* root list is empty */
				begin = first;
			}
			end = last;
		}

		// union trees
		Node KEY_VALUE_GENERIC[] newRoots = tempNodesArr;
		int maxDegree = getMaxDegree(size);
		if (newRoots.length < maxDegree) {
#if PRIMITIVE_KEY_TYPE_REAL == "Object" or PRIMITIVE_VALUE_TYPE_REAL == "Object"
			@SuppressWarnings("unchecked")
#endif
			Node KEY_VALUE_GENERIC[] t = new Node[Math.max(maxDegree, newRoots.length * 2)];
			newRoots = tempNodesArr = t;
		}

		if (c == null) {
			for (Node KEY_VALUE_GENERIC next, p = begin; p != null; p = next) {
				next = p.next;

				int degree;
				for (Node KEY_VALUE_GENERIC q; (q = newRoots[degree = p.degree]) != null;) {
					newRoots[degree] = null;
					p = unionDefaultCmp(p, q);
				}

				newRoots[degree] = p;
			}
		} else {
			for (Node KEY_VALUE_GENERIC next, p = begin; p != null; p = next) {
				next = p.next;

				int degree;
				for (Node KEY_VALUE_GENERIC q; (q = newRoots[degree = p.degree]) != null;) {
					newRoots[degree] = null;
					p = unionCustomCmp(p, q);
				}

				newRoots[degree] = p;
			}
		}
		prev = null;
		begin = null;
		for (Node KEY_VALUE_GENERIC p : newRoots) {
			if (p == null)
				continue;
			if (prev == null)
				begin = p;
			else {
				prev.next = p;
			}
			p.prev = prev;
			prev = p;
		}
		end = prev;
		if (prev != null)
			prev.next = null;

		/* Find new minimum */
		if (isMinRoot) {
			Node KEY_VALUE_GENERIC min = null;
			if (c == null) {
				for (Node KEY_VALUE_GENERIC p : newRoots) {
					if (p == null)
						continue;
					if (min == null || COMPARE_KEY_DEFAULT_GE(min.key, p.key))
						min = p;
				}
			} else {
				for (Node KEY_VALUE_GENERIC p : newRoots) {
					if (p == null)
						continue;
					if (min == null || c.compare(min.key, p.key) > 0)
						min = p;
				}
			}
			minRoot = min;
		}
		Arrays.fill(newRoots, 0, maxDegree, null);
	}

	private Node KEY_VALUE_GENERIC unionDefaultCmp(Node KEY_VALUE_GENERIC u, Node KEY_VALUE_GENERIC v) {
		if (v == minRoot || COMPARE_KEY_DEFAULT_GE(u.key, v.key)) {
			Node KEY_VALUE_GENERIC temp = u;
			u = v;
			v = temp;
		}
		assert COMPARE_KEY_DEFAULT_LEQ(u.key, v.key);
		addChild(u, v);
		return u;
	}

	private Node KEY_VALUE_GENERIC unionCustomCmp(Node KEY_VALUE_GENERIC u, Node KEY_VALUE_GENERIC v) {
		if (v == minRoot || c.compare(u.key, v.key) > 0) {
			Node KEY_VALUE_GENERIC temp = u;
			u = v;
			v = temp;
		}
		assert c.compare(u.key, v.key) <= 0;
		addChild(u, v);
		return u;
	}

	private static  KEY_VALUE_GENERIC void addChild(Node KEY_VALUE_GENERIC parent, Node KEY_VALUE_GENERIC child) {
		child.parent = parent;
		child.prev = null;
		child.next = parent.child;
		if (parent.child != null)
			child.next.prev = child;
		parent.child = child;
		parent.degree++;
	}

	private static class Node KEY_VALUE_GENERIC extends Trees.TreeNodeImpl<Node KEY_VALUE_GENERIC> implements HEAP_REFERENCE KEY_VALUE_GENERIC {

		PRIMITIVE_KEY_TYPE key;
#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
		PRIMITIVE_VALUE_TYPE value;
#endif
		byte degree;
		boolean marked;

		Node(PRIMITIVE_KEY_TYPE key) {
			this.key = key;
		}

		@Override
		public PRIMITIVE_KEY_TYPE key() {
			return key;
		}

#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
		@Override
		public PRIMITIVE_VALUE_TYPE value() {
			return value;
		}

		@Override
		public void setValue(PRIMITIVE_VALUE_TYPE val) {
			value = val;
		}
#endif

		@Override
		public String toString() {
#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
			return "{" + key + ":" + value + "}";
#else
			return String.valueOf(key);
#endif
		}

	}

	private static final double GOLDEN_RATION = (1 + Math.sqrt(5)) / 2;
	private static final double LOG_GOLDEN_RATION = Math.log(GOLDEN_RATION);
	private static final double LOG_GOLDEN_RATION_INV = 1 / LOG_GOLDEN_RATION;

	private static int getMaxDegree(int size) {
		return (int) (Math.log(size) * LOG_GOLDEN_RATION_INV) + 1;
	}

}
