/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import java.util.Comparator;
import com.jgalgo.internal.util.JGAlgoUtils;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif

import java.util.Iterator;
import com.jgalgo.internal.util.Assertions;

/**
 * Splay binary search tree.
 *
 * <p>
 * The splay tree is a binary search tree which is not strictly balanced, in contrast to a red black tree. The splay
 * tree has a property that recent accessed elements are closer to the root, and therefore faster to access. All
 * operations have a time complexity of \(O(\log n)\) amortized time.
 *
 * <p>
 * The splay tree is specifically efficient for splits and joins operations.
 *
 * <p>
 * Based on 'Self-Adjusting Binary Search Trees' by Sleator and Tarjan (1985).
 *
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
 * @param  <K> the keys type
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
 * @param  <V> the values type
#endif
 * @see        <a href="https://en.wikipedia.org/wiki/Splay_tree">Wikipedia</a>
 * @author     Barak Ugav
 */
public class SPLAY_TREE KEY_VALUE_GENERIC implements BINARY_SEARCH_TREE KEY_VALUE_GENERIC {

	private final KEY_COMPARATOR KEY_TYPE_GENERIC c;
	private SplayBSTNode KEY_VALUE_GENERIC root;
	private final SplayImpl<KEY_GENERIC_LIST_START SplayBSTNode KEY_VALUE_GENERIC> impl = new SplayImpl<>();

	/**
	 * Constructs a new, empty splay tree, ordered according to the natural ordering of its keys.
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 *
	 * <p>
	 * All keys inserted into the tree must implement the {@link Comparable} interface. Furthermore, all such keys must
	 * be <i>mutually comparable</i>: {@code k1.compareTo(k2)} must not throw a {@code ClassCastException} for any keys
	 * {@code k1} and {@code k2} in the tree. If the user attempts to insert a key to the tree that violates this
	 * constraint (for example, the user attempts to insert a string element to a tree whose keys are integers), the
	 * {@code insert} call will throw a {@code ClassCastException}.
#endif
	 */
	public SPLAY_TREE() {
		this(null);
	}

	/**
	 * Constructs a new, empty splay tree, with keys ordered according to the specified comparator.
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 *
	 * <p>
	 * All keys inserted into the tree must be <i>mutually comparable</i> by the specified comparator:
	 * {@code comparator.compare(k1, k2)} must not throw a {@code ClassCastException} for any keys {@code k1} and
	 * {@code k2} in the tree. If the user attempts to insert a key to the tree that violates this constraint, the
	 * {@code insert} call will throw a {@code ClassCastException}.
#endif
	 *
	 * @param comparator the comparator that will be used to order this tree. If {@code null}, the
	 *                       {@linkplain Comparable natural ordering} of the keys will be used.
	 */
	public SPLAY_TREE(KEY_COMPARATOR KEY_TYPE_GENERIC comparator) {
		this.c = comparator;
	}

	@Override
	public boolean isEmpty() {
		return root == null;
	}

	@Override
	public boolean isNotEmpty() {
		return root != null;
	}

	@Override
	public KEY_COMPARATOR KEY_TYPE_GENERIC comparator() {
		return c;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC extractMin() {
		HEAP_REFERENCE KEY_VALUE_GENERIC min = findMin();
		remove(min);
		return min;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC extractMax() {
		HEAP_REFERENCE KEY_VALUE_GENERIC max = findMax();
		remove(max);
		return max;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Iterator<HEAP_REFERENCE KEY_VALUE_GENERIC> iterator() {
		return (Iterator) new BINARY_SEARCH_TREES.BSTIterator <>(root);
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC insert(PRIMITIVE_KEY_TYPE key) {
		return insertNode(new SplayBSTNode KEY_VALUE_GENERIC_EMPTY(key));
	}

	private SplayBSTNode KEY_VALUE_GENERIC insertNode(SplayBSTNode KEY_VALUE_GENERIC n) {
		assert n.parent == null;
		assert n.left == null;
		assert n.right == null;
		if (root == null)
			return root = n;

		BINARY_SEARCH_TREES.insert(root, c, n);
		return root = impl.splay(n);
	}

	@Override
	public void remove(HEAP_REFERENCE KEY_VALUE_GENERIC ref) {
		SplayBSTNode KEY_VALUE_GENERIC n = (SplayBSTNode KEY_VALUE_GENERIC) ref;

		/* If the node has two children, swap with successor */
		if (n.hasLeftChild() && n.hasRightChild())
			BINARY_SEARCH_TREES.swap(n, BINARY_SEARCH_TREES.getSuccessor(n));

		SplayBSTNode KEY_VALUE_GENERIC child;
		if (!n.hasLeftChild()) {
			replace(n, child = n.right);
		} else {
			assert !n.hasRightChild();
			replace(n, child = n.left);
		}


		SplayBSTNode KEY_VALUE_GENERIC parent = n.parent;
		n.clearWithoutUserData();
		root = impl.splay(child != null ? child : parent);
	}

	private static KEY_VALUE_GENERIC void replace(SplayBSTNode KEY_VALUE_GENERIC u, SplayBSTNode KEY_VALUE_GENERIC v) {
		/* replaces u with v */
		if (u.parent != null) {
			if (u.isLeftChild()) {
				u.parent.left = v;
			} else {
				assert u.isRightChild();
				u.parent.right = v;
			}
		}
		if (v != null)
			v.parent = u.parent;
	}

	@Override
	public void decreaseKey(HEAP_REFERENCE KEY_VALUE_GENERIC ref, PRIMITIVE_KEY_TYPE newKey) {
		SplayBSTNode KEY_VALUE_GENERIC n = (SplayBSTNode KEY_VALUE_GENERIC) ref;
		Assertions.Heaps.decreaseKeyIsSmaller(n.key, newKey, c);
		remove(n);
		n.key = newKey;
		insertNode(n);
	}

	@Override
	public void increaseKey(HEAP_REFERENCE KEY_VALUE_GENERIC ref, PRIMITIVE_KEY_TYPE newKey) {
		SplayBSTNode KEY_VALUE_GENERIC n = (SplayBSTNode KEY_VALUE_GENERIC) ref;
		Assertions.Heaps.increaseKeyIsGreater(n.key, newKey, c);
		remove(n);
		n.key = newKey;
		insertNode(n);
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC find(PRIMITIVE_KEY_TYPE key) {
		SplayBSTNode KEY_VALUE_GENERIC n = BINARY_SEARCH_TREES.find(root, c, key);
		return n == null ? null : (root = impl.splay(n));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findMin() {
		checkTreeNotEmpty();
		return root = impl.splay(BINARY_SEARCH_TREES.findMin(root));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findMax() {
		checkTreeNotEmpty();
		return root = impl.splay(BINARY_SEARCH_TREES.findMax(root));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findOrSmaller(PRIMITIVE_KEY_TYPE key) {
		SplayBSTNode KEY_VALUE_GENERIC n = BINARY_SEARCH_TREES.findOrSmaller(root, c, key);
		return n == null ? null : (root = impl.splay(n));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findOrGreater(PRIMITIVE_KEY_TYPE key) {
		SplayBSTNode KEY_VALUE_GENERIC n = BINARY_SEARCH_TREES.findOrGreater(root, c, key);
		return n == null ? null : (root = impl.splay(n));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findSmaller(PRIMITIVE_KEY_TYPE key) {
		SplayBSTNode KEY_VALUE_GENERIC n = BINARY_SEARCH_TREES.findSmaller(root, c, key);
		return n == null ? null : (root = impl.splay(n));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findGreater(PRIMITIVE_KEY_TYPE key) {
		SplayBSTNode KEY_VALUE_GENERIC n = BINARY_SEARCH_TREES.findGreater(root, c, key);
		return n == null ? null : (root = impl.splay(n));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC getPredecessor(HEAP_REFERENCE KEY_VALUE_GENERIC ref) {
		SplayBSTNode KEY_VALUE_GENERIC n = BINARY_SEARCH_TREES.getPredecessor((SplayBSTNode KEY_VALUE_GENERIC) ref);
		return n == null ? null : (root = impl.splay(n));
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC getSuccessor(HEAP_REFERENCE KEY_VALUE_GENERIC ref) {
		SplayBSTNode KEY_VALUE_GENERIC n = BINARY_SEARCH_TREES.getSuccessor((SplayBSTNode KEY_VALUE_GENERIC) ref);
		return n == null ? null : (root = impl.splay(n));
	}

	@Override
	public void meld(REFERENCEABLE_HEAP KEY_VALUE_GENERIC heap) {
		Assertions.Heaps.noMeldWithSelf(this, heap);
		Assertions.Heaps.meldWithSameImpl(SPLAY_TREE.class, heap);
		Assertions.Heaps.equalComparatorBeforeMeld(comparator(), heap.comparator());
		SPLAY_TREE KEY_VALUE_GENERIC h = (SPLAY_TREE KEY_VALUE_GENERIC) heap;
		if (h.isEmpty())
			return;
		if (isEmpty()) {
			root = h.root;
			h.root = null;
			return;
		}

		KEY_COMPARATOR KEY_TYPE_GENERIC cmp = c != null ? c : (a, b) -> COMPARE_KEY_DEFAULT(a, b);

		PRIMITIVE_KEY_TYPE min1, max1, min2, max2;
		if (cmp.compare(max1 = findMax().key(), min2 = h.findMin().key()) <= 0) {
			/* all elements in this tree are <= than all elements in other tree */
			root = meld(this, h);
		} else if (cmp.compare(min1 = findMin().key(), max2 = h.findMax().key()) >= 0) {
			/* all elements in this tree are >= than all elements in other tree */
			root = meld(h, this);
		} else {
			int minCmp = cmp.compare(min1, min2);
			int maxCmp = cmp.compare(max1, max2);
			SPLAY_TREE KEY_VALUE_GENERIC hLow = null, hHigh = null;

			if (minCmp < 0) {
				hLow = this.splitSmaller(min2);
			} else if (minCmp > 0) {
				hLow = h.splitSmaller(min1);
			}
			if (maxCmp < 0) {
				hHigh = h.splitGreater(max1);
			} else if (maxCmp > 0) {
				hHigh = this.splitGreater(max2);
			}

			if (h.root != null) {
				/* there is nothing smarter to do than 'addAll' for the shared range */
				/* We use 'insertNode' instead of 'insert' to maintain user references to nodes */
				for (SplayBSTNode KEY_VALUE_GENERIC node = h.root;;) {
					for (;;) {
						while (node.hasLeftChild())
							node = node.left;
						if (!node.hasRightChild())
							break;
						node = node.right;
					}
					SplayBSTNode KEY_VALUE_GENERIC parent = node.parent;
					if (parent == null) {
						insertNode(node);
						break;
					} else {
						if (parent.right == node) {
							parent.right = null;
						} else {
							assert parent.left == node;
							parent.left = null;
						}
						node.parent = null;
						insertNode(node);
						node = parent;
					}
				}
			}

			if (hLow != null) {
				assert cmp.compare(hLow.findMax().key(), findMin().key()) < 0;
				root = meld(hLow, this);
			}
			if (hHigh != null) {
				assert cmp.compare(hHigh.findMin().key(), findMax().key()) > 0;
				root = meld(this, hHigh);
			}
		}
		h.root = null;
	}

	private static KEY_VALUE_GENERIC SplayBSTNode KEY_VALUE_GENERIC meld(SPLAY_TREE KEY_VALUE_GENERIC t1, SPLAY_TREE KEY_VALUE_GENERIC t2) {
		/* Assume all nodes in t1 are smaller than all nodes in t2 */

		/* Splay t1 max and t2 min */
		SplayBSTNode KEY_VALUE_GENERIC n1 = (SplayBSTNode KEY_VALUE_GENERIC) t1.findMax();
		assert n1.isRoot();
		assert !n1.hasRightChild();

		n1.right = t2.root;
		t2.root.parent = n1;
		return n1;
	}

	@Override
	public SPLAY_TREE KEY_VALUE_GENERIC splitSmaller(PRIMITIVE_KEY_TYPE key) {
		SPLAY_TREE KEY_VALUE_GENERIC newTree = new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY(c);
		SplayBSTNode KEY_VALUE_GENERIC pred = (SplayBSTNode KEY_VALUE_GENERIC) findSmaller(key);
		if (pred == null)
			return newTree;
		assert pred.isRoot();

		if ((root = pred.right) != null) {
			pred.right.parent = null;
			pred.right = null;
		}

		newTree.root = pred;
		return newTree;
	}

	@Override
	public SPLAY_TREE KEY_VALUE_GENERIC splitGreater(PRIMITIVE_KEY_TYPE key) {
		SplayBSTNode KEY_VALUE_GENERIC succ = (SplayBSTNode KEY_VALUE_GENERIC) findGreater(key);
		if (succ == null)
			return new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY(c);
		return split(succ);
	}

	@Override
	public SPLAY_TREE KEY_VALUE_GENERIC split(HEAP_REFERENCE KEY_VALUE_GENERIC ref) {
		SPLAY_TREE KEY_VALUE_GENERIC newTree = new SPLAY_TREE KEY_VALUE_GENERIC_EMPTY(c);

		SplayBSTNode KEY_VALUE_GENERIC n = impl.splay((SplayBSTNode KEY_VALUE_GENERIC) ref);
		assert n.isRoot();

		if ((root = n.left) != null) {
			n.left.parent = null;
			n.left = null;
		}

		newTree.root = n;
		return newTree;
	}

	@Override
	public void clear() {
		if (root == null)
			return;
		BINARY_SEARCH_TREES.clear(root);
		root = null;
	}

	static class BaseNode<KEY_GENERIC_LIST_START N extends BaseNode<KEY_GENERIC_LIST_START N>> extends BINARY_SEARCH_TREES.Node<KEY_GENERIC_LIST_START N> {

		BaseNode(PRIMITIVE_KEY_TYPE key) {
			super(key);
		}

		public PRIMITIVE_KEY_TYPE key() {
			return key;
		}

	}

	static class SplayImpl<KEY_GENERIC_LIST_START N extends BaseNode<KEY_GENERIC_LIST_START N>> {

		SplayImpl() {}

		N splay(N n) {
			if (n == null || n.isRoot())
				return n;
			for (;;) {
				N parent = n.parent;

				if (parent.isRoot()) {
					/* zig */
					rotate(n);
					return n;
				}

				if (n.isLeftChild() == parent.isLeftChild()) {
					/* zig-zig */
					rotate(parent);
					rotate(n);
				} else {
					/* zig-zag */
					rotate(n);
					rotate(n);
				}

				if (n.isRoot())
					return n;
			}
		}

		private void rotate(N n) {
			N parent = n.parent, grandparent = parent.parent;

			beforeRotate(n);

			if (n.isLeftChild()) {

				parent.left = n.right;
				if (parent.hasLeftChild())
					parent.left.parent = parent;
				n.right = parent;

			} else {
				assert n.isRightChild();

				parent.right = n.left;
				if (parent.hasRightChild())
					parent.right.parent = parent;
				n.left = parent;
			}

			n.parent = grandparent;
			parent.parent = n;
			if (grandparent != null) {
				if (grandparent.left == parent)
					grandparent.left = n;
				else
					grandparent.right = n;
			}
		}

		void beforeRotate(N n) {}

	}

	private static class SplayBSTNode KEY_VALUE_GENERIC extends BaseNode<KEY_GENERIC_LIST_START SplayBSTNode KEY_VALUE_GENERIC> implements HEAP_REFERENCE KEY_VALUE_GENERIC {

#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
		private PRIMITIVE_VALUE_TYPE value;
#endif

		SplayBSTNode(PRIMITIVE_KEY_TYPE key) {
			super(key);
		}

		@Override
		public PRIMITIVE_KEY_TYPE key() {
			return key;
		}

#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
		@Override
		public PRIMITIVE_VALUE_TYPE value() {
			return value;
		}

		@Override
		public void setValue(PRIMITIVE_VALUE_TYPE val) {
			value = val;
		}
#endif

		@Override
		public String toString() {
#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
			return "{" + key + ":" + value + "}";
#else
			return String.valueOf(key);
#endif
		}

	}

	private void checkTreeNotEmpty() {
		if (root == null)
			throw new IllegalStateException("Tree is empty");
	}

}
