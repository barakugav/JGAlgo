/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

import static com.jgalgo.internal.util.Range.range;
import java.util.Arrays;
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import com.jgalgo.internal.util.JGAlgoUtils;
import java.util.Comparator;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import com.jgalgo.internal.util.Assertions;

/**
 * A binomial heap implementation.
 *
 * <p>
 * Pointer based data structure that support user references to the internal nodes, allowing efficient \(O(\log n)\)
 * implementation of the {@link #remove(HEAP_REFERENCE)} and
 * {@link #decreaseKey(HEAP_REFERENCE, PRIMITIVE_KEY_TYPE_REAL)} operations. The regular operations like
 * {@link #insert(PRIMITIVE_KEY_TYPE_REAL)}, {@link #extractMin()} and {@link #findMin()} are also implemented in \(O(\log n)\) time.
 * Another advantage of the binomial heap is its ability to merge with another binomial heap in \(O(\log n)\) time,
 * which is much faster than the required \(O(n)\) time of binary heaps.
 *
 * <p>
 * Although it has great complexities bounds, {@link #decreaseKey(HEAP_REFERENCE, PRIMITIVE_KEY_TYPE_REAL)} can is
 * implemented in faster times by Fibonnachi and Pairing heaps.
 *
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
 * @param  <K> the keys type
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
 * @param  <V> the values type
#endif
 * @see        <a href="https://en.wikipedia.org/wiki/Binomial_heap">Wikipedia</a>
 * @author     Barak Ugav
 */
public class BINOMIAL_HEAP KEY_VALUE_GENERIC implements REFERENCEABLE_HEAP KEY_VALUE_GENERIC {

	private final KEY_COMPARATOR KEY_TYPE_GENERIC c;
	private Node KEY_VALUE_GENERIC[] roots;
	private int rootsLen;

#if PRIMITIVE_KEY_TYPE_REAL == "Object" or PRIMITIVE_VALUE_TYPE_REAL == "Object"
	@SuppressWarnings("unchecked")
#endif
	private Node KEY_VALUE_GENERIC[] tempNodeArray = EmptyNodeArr;

#if PRIMITIVE_KEY_TYPE_REAL == "Object" or PRIMITIVE_VALUE_TYPE_REAL == "Object"
	@SuppressWarnings("rawtypes")
#endif
	private static final Node[] EmptyNodeArr = new Node[0];

	/**
	 * Constructs a new, empty binomial heap, ordered according to the natural ordering of its keys.
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 *
	 * <p>
	 * All keys inserted into the heap must implement the {@link Comparable} interface. Furthermore, all such keys must
	 * be <i>mutually comparable</i>: {@code k1.compareTo(k2)} must not throw a {@code ClassCastException} for any keys
	 * {@code k1} and {@code k2} in the heap. If the user attempts to insert a key to the heap that violates this
	 * constraint (for example, the user attempts to insert a string element to a heap whose keys are integers), the
	 * {@code insert} call will throw a {@code ClassCastException}.
#endif
	 */
	public BINOMIAL_HEAP() {
		this(null);
	}

	/**
	 * Constructs a new, empty binomial heap, with keys ordered according to the specified comparator.
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 *
	 * <p>
	 * All keys inserted into the heap must be <i>mutually comparable</i> by the specified comparator:
	 * {@code comparator.compare(k1, k2)} must not throw a {@code ClassCastException} for any keys {@code k1} and
	 * {@code k2} in the heap. If the user attempts to insert a key to the heap that violates this constraint, the
	 * {@code insert} call will throw a {@code ClassCastException}.
#endif
	 *
	 * @param comparator the comparator that will be used to order this heap. If {@code null}, the
	 *                       {@linkplain Comparable natural ordering} of the keys will be used.
	 */
#if PRIMITIVE_KEY_TYPE_REAL == "Object" or PRIMITIVE_VALUE_TYPE_REAL == "Object"
	@SuppressWarnings("unchecked")
#endif
	public BINOMIAL_HEAP(KEY_COMPARATOR KEY_TYPE_GENERIC comparator) {
		c = comparator;
		roots = EmptyNodeArr;
		rootsLen = 0;
	}

	@Override
	public KEY_COMPARATOR KEY_TYPE_GENERIC comparator() {
		return c;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC extractMin() {
		HEAP_REFERENCE KEY_VALUE_GENERIC min = findMin();
		remove(min);
		return min;
	}

	private void swapParentChild(Node KEY_VALUE_GENERIC parent, Node KEY_VALUE_GENERIC child) {
		final Node KEY_VALUE_GENERIC pNext = parent.next, pPrev = parent.prev, pParent = parent.parent, pChild = parent.child;
		Node KEY_VALUE_GENERIC t;

		parent.next = (t = child.next);
		if (t != null)
			t.prev = parent;
		parent.prev = (t = child.prev);
		if (t != null)
			t.next = parent;
		parent.child = child.child;
		for (Node KEY_VALUE_GENERIC p = child.child; p != null; p = p.next)
			p.parent = parent;

		child.next = pNext;
		if (pNext != null)
			pNext.prev = child;
		child.prev = pPrev;
		if (pPrev != null)
			pPrev.next = child;
		child.child = pChild == child ? parent : pChild;
		for (Node KEY_VALUE_GENERIC p = child.child; p != null; p = p.next)
			p.parent = child;
		child.parent = pParent;
		if (pParent != null && pParent.child == parent)
			pParent.child = child;

		if (pParent == null) {
			/* Switched a root, fix roots array */
			Node KEY_VALUE_GENERIC[] rs = roots;
			for (int i : range(rootsLen)) {
				if (rs[i] == parent) {
					rs[i] = child;
					break;
				}
			}
		}
	}

	@Override
	public void decreaseKey(HEAP_REFERENCE KEY_VALUE_GENERIC ref, PRIMITIVE_KEY_TYPE newKey) {
		Node KEY_VALUE_GENERIC node = (Node KEY_VALUE_GENERIC) ref;
		Assertions.heapDecreaseKeyIsSmaller(node.key, newKey, c);
		node.key = newKey;

		if (c == null) {
			for (Node KEY_VALUE_GENERIC p; (p = node.parent) != null;) {
				if (COMPARE_KEY_DEFAULT_LEQ(p.key, newKey))
					break;
				swapParentChild(p, node);
			}
		} else {
			for (Node KEY_VALUE_GENERIC p; (p = node.parent) != null;) {
				if (c.compare(p.key, newKey) <= 0)
					break;
				swapParentChild(p, node);
			}
		}
	}

	@Override
	public void increaseKey(HEAP_REFERENCE KEY_VALUE_GENERIC ref, PRIMITIVE_KEY_TYPE newKey) {
		Node KEY_VALUE_GENERIC node = (Node KEY_VALUE_GENERIC) ref;
		Assertions.heapIncreaseKeyIsGreater(node.key, newKey, c);
		remove(node);
		node.key = newKey;
		insertNode(node);
	}

	@Override
	public void remove(HEAP_REFERENCE KEY_VALUE_GENERIC ref) {
		Node KEY_VALUE_GENERIC node = (Node KEY_VALUE_GENERIC) ref;

		/* propagate to top of the tree */
		for (Node KEY_VALUE_GENERIC p; (p = node.parent) != null;)
			swapParentChild(p, node);

		Node KEY_VALUE_GENERIC[] rs = roots;
		int rootIdx = -1;
		for (int i : range(rootsLen)) {
			if (rs[i] == node) {
				rs[i] = null;
				rootIdx = i;
				break;
			}
		}
		if (rootIdx == -1)
			throw new ConcurrentModificationException();

		Node KEY_VALUE_GENERIC[] childs = tempArray(rootIdx);
		Node KEY_VALUE_GENERIC next, p = node.child;
		for (int i = 0; i < rootIdx; i++, p = next) {
			next = p.next;
			p.parent = null;
			p.next = null;
			p.prev = null;
			childs[rootIdx - i - 1] = p;
		}
		node.child = null;

		meld(childs, rootIdx);
		while (rootsLen > 0 && roots[rootsLen - 1] == null)
			rootsLen--;
	}

	@Override
	public void clear() {
		Node KEY_VALUE_GENERIC[] rs = roots;
		int rslen = rootsLen;

		for (int i : range(rslen)) {
			if (rs[i] != null) {
				Trees.clear(rs[i], n -> {
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
					n.key = null;
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
					n.value = null;
#endif
				});
				rs[i] = null;
			}
		}

		rootsLen = 0;
	}

	@Override
	public boolean isEmpty() {
		return rootsLen == 0;
	}

	@Override
	public boolean isNotEmpty() {
		return rootsLen != 0;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC insert(PRIMITIVE_KEY_TYPE key) {
		Node KEY_VALUE_GENERIC node = new Node KEY_VALUE_GENERIC_EMPTY(key);
		insertNode(node);
		return node;
	}

	private void insertNode(Node KEY_VALUE_GENERIC node) {
		assert node.parent == null && node.child == null && node.next == null && node.prev == null;
		Node KEY_VALUE_GENERIC[] h2 = tempArray(1);
		h2[0] = node;
		meld(h2, 1);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Iterator<HEAP_REFERENCE KEY_VALUE_GENERIC> iterator() {
		return (Iterator) new Itr();
	}

	private static KEY_VALUE_GENERIC Node KEY_VALUE_GENERIC mergeTreesDefaultCmp(Node KEY_VALUE_GENERIC r1, Node KEY_VALUE_GENERIC r2) {
		assert r1 != r2;
		if (r1 == r2)
			throw new IllegalStateException();
		if (COMPARE_KEY_DEFAULT_GE(r1.key, r2.key)) {
			Node KEY_VALUE_GENERIC t = r1;
			r1 = r2;
			r2 = t;
		}
		r2.next = r1.child;
		Node KEY_VALUE_GENERIC next = r1.child;
		if (next != null)
			next.prev = r2;
		r1.child = r2;
		r2.parent = r1;

		return r1;
	}

	private Node KEY_VALUE_GENERIC mergeTreesCustomCmp(Node KEY_VALUE_GENERIC r1, Node KEY_VALUE_GENERIC r2) {
		assert r1 != r2;
		if (r1 == r2)
			throw new IllegalStateException();
		if (c.compare(r1.key, r2.key) > 0) {
			Node KEY_VALUE_GENERIC t = r1;
			r1 = r2;
			r2 = t;
		}
		r2.next = r1.child;
		Node KEY_VALUE_GENERIC next = r1.child;
		if (next != null)
			next.prev = r2;
		r1.child = r2;
		r2.parent = r1;

		return r1;
	}

	private int meld(Node KEY_VALUE_GENERIC[] rs2, int rs2len) {
		Node KEY_VALUE_GENERIC[] rs1 = roots;
		int rs1len = rootsLen;
		int h2size = 0;
		rootsLen = rs1len > rs2len ? rs1len : rs2len;

		int maxArrLen = Math.max(rs1len, rs2len) + 1;
		if (maxArrLen > roots.length)
			roots = Arrays.copyOf(roots, Math.max(maxArrLen, roots.length * 2));

		Node KEY_VALUE_GENERIC carry = null;
		if (c == null) {
			for (int i : range(rootsLen)) {
				Node KEY_VALUE_GENERIC r1 = i < rs1len ? rs1[i] : null;
				Node KEY_VALUE_GENERIC r2 = i < rs2len ? rs2[i] : null;

				if (r2 != null)
					h2size += 1 << i;

				if ((r1 == null && r2 == null) || (r1 != null && r2 != null)) {
					roots[i] = carry;
					carry = (r1 != null && r2 != null) ? mergeTreesDefaultCmp(r1, r2) : null;
				} else {
					Node KEY_VALUE_GENERIC r = r1 != null ? r1 : r2;
					if (carry == null)
						roots[i] = r;
					else {
						roots[i] = null;
						carry = mergeTreesDefaultCmp(carry, r);
					}
				}
			}
		} else {
			for (int i : range(rootsLen)) {
				Node KEY_VALUE_GENERIC r1 = i < rs1len ? rs1[i] : null;
				Node KEY_VALUE_GENERIC r2 = i < rs2len ? rs2[i] : null;

				if (r2 != null)
					h2size += 1 << i;

				if ((r1 == null && r2 == null) || (r1 != null && r2 != null)) {
					roots[i] = carry;
					carry = (r1 != null && r2 != null) ? mergeTreesCustomCmp(r1, r2) : null;
				} else {
					Node KEY_VALUE_GENERIC r = r1 != null ? r1 : r2;
					if (carry == null)
						roots[i] = r;
					else {
						roots[i] = null;
						carry = mergeTreesCustomCmp(carry, r);
					}
				}
			}
		}
		if (carry != null)
			roots[rootsLen++] = carry;

		Arrays.fill(rs2, 0, rs2len, null);

		return h2size;
	}

#if PRIMITIVE_KEY_TYPE_REAL == "Object" or PRIMITIVE_VALUE_TYPE_REAL == "Object"
	@SuppressWarnings("unchecked")
#endif
	@Override
	public void meld(REFERENCEABLE_HEAP KEY_VALUE_GENERIC heap) {
		Assertions.heapNoMeldWithSelf(this, heap);
		Assertions.heapMeldWithSameImpl(BINOMIAL_HEAP.class, heap);
		Assertions.heapEqualComparatorBeforeMeld(comparator(), heap.comparator());

		BINOMIAL_HEAP KEY_VALUE_GENERIC h = (BINOMIAL_HEAP KEY_VALUE_GENERIC) heap;
		meld(h.roots, h.rootsLen);

		h.roots = EmptyNodeArr;
		h.rootsLen = 0;
	}

	@Override
	public HEAP_REFERENCE KEY_VALUE_GENERIC findMin() {
		Assertions.notEmpty(this);
		Node KEY_VALUE_GENERIC[] rs = roots;
		int rsLen = rootsLen;
		Node KEY_VALUE_GENERIC min = null;

		if (c == null) {
			for (int i : range(rsLen))
				if (rs[i] != null && (min == null || COMPARE_KEY_DEFAULT_GE(min.key, rs[i].key)))
					min = rs[i];
		} else {
			for (int i : range(rsLen))
				if (rs[i] != null && (min == null || c.compare(min.key, rs[i].key) > 0))
					min = rs[i];
		}
		return min;
	}

	private Node KEY_VALUE_GENERIC[] tempArray(int n) {
		if (n > tempNodeArray.length)
			tempNodeArray = Arrays.copyOf(tempNodeArray, Math.max(2, Math.max(tempNodeArray.length, n)));
		return tempNodeArray;
	}

	private static class Node KEY_VALUE_GENERIC extends Trees.TreeNodeImpl<Node KEY_VALUE_GENERIC> implements HEAP_REFERENCE KEY_VALUE_GENERIC {

		PRIMITIVE_KEY_TYPE key;
#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
		PRIMITIVE_VALUE_TYPE value;
#endif

		Node(PRIMITIVE_KEY_TYPE key) {
			this.key = key;
		}

		@Override
		public PRIMITIVE_KEY_TYPE key() {
			return key;
		}

#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
		@Override
		public PRIMITIVE_VALUE_TYPE value() {
			return value;
		}

		@Override
		public void setValue(PRIMITIVE_VALUE_TYPE val) {
			value = val;
		}
#endif

		@Override
		public String toString() {
#if PRIMITIVE_VALUE_TYPE_REAL != "Void"
			return "{" + key + ":" + value + "}";
#else
			return String.valueOf(key);
#endif
		}

	}

	private class Itr extends Trees.PreOrderIter<Node KEY_VALUE_GENERIC> {

		private int nextRootIdx;

		Itr() {
			super(null);
			nextRootIdx = 0;
			advanceToNextRoot();
		}

		private boolean advanceToNextRoot() {
			for (;; nextRootIdx++) {
				if (nextRootIdx >= rootsLen)
					return false;
				if (roots[nextRootIdx] != null) {
					reset(roots[nextRootIdx]);
					nextRootIdx++;
					return true;
				}
			}
		}

		@Override
		boolean advance() {
			return super.advance() || advanceToNextRoot();
		}

	}

}
