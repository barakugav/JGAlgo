/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.internal.ds;

#if PRIMITIVE_KEY_TYPE_REAL == "Object"
import java.util.Comparator;
#else
import FASTUTIL_KEY_PACKAGE.KEY_COMPARATOR;
#endif

/**
 * Binary search tree data structure.
 *
 * <p>
 * In addition to all {@link REFERENCEABLE_HEAP} operations, a binary search tree (BST) allow for an efficient search of
 * an element, not just {@link #findMin()}. Every element can be found in \(O(\log n)\) time, notably
 * {@link #findMax()} in addition to {@link #findMin()}. Also, given an element, the nearest (smaller or larger)
 * element in the tree can be found efficiently.
 *
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
 * @param  <K> the keys type
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
 * @param  <V> the values type
#endif
 * @author     Barak Ugav
 */
public interface BINARY_SEARCH_TREE KEY_VALUE_GENERIC extends REFERENCEABLE_HEAP KEY_VALUE_GENERIC {

	/**
	 * Find the element with the maximal key in the tree and return a reference to it.
	 *
	 * @return                       a reference to the element with the maximal key in the tree
	 * @throws IllegalStateException if the tree is empty
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC findMax();

	/**
	 * Extract the element with the maximal key in the tree.
	 *
	 * <p>
	 * This method find and <b>remove</b> the element with the maximal key.
	 *
	 * @return                       the element with the maximal key in the tree
	 * @throws IllegalStateException if the tree is empty
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC extractMax();

	/**
	 * Find an element in the tree by its key, or the element with the greatest strictly smaller (predecessor) key than
	 * it if it's not found.
	 *
	 * @param  key the search key
	 * @return     reference to an element with the searched key or it's predecessor if is not found, or {@code null} if
	 *             there is no predecessor
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC findOrSmaller(PRIMITIVE_KEY_TYPE key);

	/**
	 * Find an element in the tree by its key, or the element with the smallest strictly greater (successor) key than it
	 * if it's not found.
	 *
	 * @param  key the search key
	 * @return     reference to an element with the searched key or it's successor if it is not found, or {@code null}
	 *             if there is no successor
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC findOrGreater(PRIMITIVE_KEY_TYPE key);

	/**
	 * Find the element with the greatest strictly smaller key than a given key.
	 *
	 * @param  key a key
	 * @return     reference to the predecessor element with strictly smaller key or {@code null} if no such exists
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC findSmaller(PRIMITIVE_KEY_TYPE key);

	/**
	 * Find the element with the smallest strictly greater key than a given key.
	 *
	 * @param  key a key
	 * @return     reference to the successor element with strictly greater key or {@code null} if no such exists
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC findGreater(PRIMITIVE_KEY_TYPE key);

	/**
	 * Get the predecessor of a node in the tree.
	 *
	 * <p>
	 * The predecessor node depends on the tree structure. If there are no duplicate keys, the predecessor is the
	 * greatest value strictly smaller than the given element. If there are duplicate keys, it may be smaller or equal.
	 *
	 * <p>
	 * This method behavior is undefined if the reference is not valid, namely if it refer to an element already
	 * removed, or to an element in another heap.
	 *
	 * @param  ref reference to an element in the tree
	 * @return     reference to the predecessor element in the tree, that is an element with smaller or equal key to the
	 *             given referenced element's key, or {@code null} if no such predecessor exists
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC getPredecessor(HEAP_REFERENCE KEY_VALUE_GENERIC ref);

	/**
	 * Finds the successor of an element in the tree.
	 *
	 * <p>
	 * The successor node depends on the tree structure. If there are no duplicate keys, the successor is the smallest
	 * value strictly greater than the given element. If there are duplicate keys, it may be greater or equal.
	 *
	 * <p>
	 * This method behavior is undefined if the reference is not valid, namely if it refer to an element already
	 * removed, or to an element in another heap.
	 *
	 * @param  ref reference to an element in the tree
	 * @return     reference to the successor element in the tree, that is an element with greater or equal key to the
	 *             given referenced element's key, or {@code null} if no such successor exists
	 */
	HEAP_REFERENCE KEY_VALUE_GENERIC getSuccessor(HEAP_REFERENCE KEY_VALUE_GENERIC ref);

	/**
	 * Split the current BST into two different BSTs with keys strictly smaller and greater or equal than a key.
	 *
	 * <p>
	 * After this operation, all elements in this tree will have keys greater or equal than the given key, and the
	 * returned new tree will contain elements with keys strictly smaller than the given key.
	 *
	 * @param  key a pivot key
	 * @return     new tree with elements with keys strictly smaller than the given key
	 */
	BINARY_SEARCH_TREE KEY_VALUE_GENERIC splitSmaller(PRIMITIVE_KEY_TYPE key);

	/**
	 * Split the current BST into two different BSTs with keys smaller or equal and strictly greater than a key.
	 *
	 * <p>
	 * After this operation, all elements in this tree will have keys be smaller or equal than the given key, and the
	 * returned new tree will contain elements with keys strictly greater than the given key.
	 *
	 * @param  key a pivot key
	 * @return     new tree with elements with keys strictly greater than the given key
	 */
	BINARY_SEARCH_TREE KEY_VALUE_GENERIC splitGreater(PRIMITIVE_KEY_TYPE key);

	/**
	 * Split the current BST into two different BSTs with elements smaller and greater than an element's key.
	 *
	 * <p>
	 * After this operation, all elements keys in this tree will be smaller or equal to the given element's key, and the
	 * returned new tree will contain elements with keys greater than the given element's key. If the tree contains
	 * duplications of the given element's key, the elements keys in the returned tree will be greater or equal (rather
	 * than strictly greater). To split a tree more precisely, use {@link #splitSmaller(PRIMITIVE_KEY_TYPE_REAL)} or
	 * {@link #splitGreater(PRIMITIVE_KEY_TYPE_REAL)}.
	 *
	 * <p>
	 * This method behavior is undefined if the reference is not valid, namely if it refer to an element already
	 * removed, or to an element in another heap.
	 *
	 * @param  ref given element in the tree
	 * @return     new tree with elements with keys greater (greater or equal if duplicate keys of the given element's
	 *             key exists) than the given key
	 */
	BINARY_SEARCH_TREE KEY_VALUE_GENERIC split(HEAP_REFERENCE KEY_VALUE_GENERIC ref);

	/**
	 * Create a new BST.
	 *
	 * <p>
	 * This is the recommended way to instantiate a new {@link BINARY_SEARCH_TREE} object.
	 *
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 * @param  <K> the keys type
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
	 * @param  <V> the values type
#endif
	 * @return a default implementation of {@link BINARY_SEARCH_TREE}
	 */
	static KEY_VALUE_GENERIC BINARY_SEARCH_TREE KEY_VALUE_GENERIC newInstance() {
		return newInstance(null);
	}

	/**
	 * Create a new BST with custom comparator.
	 *
	 * <p>
	 * This is the recommended way to instantiate a new {@link BINARY_SEARCH_TREE} object.
	 *
#if PRIMITIVE_KEY_TYPE_REAL == "Object"
	 * @param  <K> the keys type
#endif
#if PRIMITIVE_VALUE_TYPE_REAL == "Object"
	 * @param  <V> the values type
#endif
	 * @param  cmp a custom comparator
	 * @return a default implementation of {@link BINARY_SEARCH_TREE}
	 */
	static KEY_VALUE_GENERIC BINARY_SEARCH_TREE KEY_VALUE_GENERIC newInstance(KEY_COMPARATOR KEY_TYPE_GENERIC cmp) {
		return new RED_BLACK_TREE KEY_VALUE_GENERIC_EMPTY(cmp);
	}

}
