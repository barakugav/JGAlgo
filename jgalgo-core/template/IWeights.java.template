/*-
 * Copyright 2023 Barak Ugav
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jgalgo.graph;

/**
 * Specific weights of {@code PRIMITIVE_TYPE_REAL} for {@linkplain IntGraph int graphs}.
 *
 * @author Barak Ugav
 */
public interface IWEIGHTS TYPE_GENERIC extends IWeights<TYPE_GENERIC_CLASS>, WEIGHTS<Integer TYPE_GENERIC_IN_TEMPLATE_LIST>
#if PRIMITIVE_TYPE in ["byte", "short", "int"]
, IWeightFunctionInt
#elif PRIMITIVE_TYPE in ["long", "float", "double"]
, IWeightFunction
#endif
{

	/**
	 * Get the weight associated with the given element.
	 *
	 * @param  element an element (edge/vertex.)
	 * @return    the weight associated with the given element.
	 */
	public PRIMITIVE_TYPE get(int element);

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #get(int)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default PRIMITIVE_TYPE get(Integer element) {
		return get(element.intValue());
	}

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #get(int)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default TYPE_GENERIC_CLASS getAsObj(int element) {
		return PRIMITIVE_TO_BOXED(get(element));
	}

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #get(int)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default TYPE_GENERIC_CLASS getAsObj(Integer element) {
		return PRIMITIVE_TO_BOXED(get(element.intValue()));
	}

	/**
	 * Set the weight associated with the given element.
	 *
	 * @param element     an element (edge/vertex)
	 * @param weight new weight that will be associated with the given element
	 */
	public void set(int element, PRIMITIVE_TYPE weight);

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #set(int, PRIMITIVE_TYPE_REAL)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default void set(Integer element, PRIMITIVE_TYPE weight) {
		set(element.intValue(), weight);
	}

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #set(int, PRIMITIVE_TYPE_REAL)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default void setAsObj(int element, TYPE_GENERIC_CLASS weight) {
		set(element, BOXED_TO_PRIMITIVE(weight));
	}

	/**
	 * {@inheritDoc}
	 *
	 * @deprecated Please use {@link #set(int, PRIMITIVE_TYPE_REAL)} instead to avoid un/boxing.
	 */
	@Deprecated
	@Override
	default void setAsObj(Integer element, TYPE_GENERIC_CLASS weight) {
		set(element.intValue(), BOXED_TO_PRIMITIVE(weight));
	}

#if PRIMITIVE_TYPE in ["byte", "short", "int"]
	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * Implement the {@link IWeightFunctionInt} interface by using the weights of the container.
	 */
	@Override
	default int weightInt(int element) {
		return get(element);
	}

	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * Implement the {@link WeightFunctionInt} interface by using the weights of the container.
	 */
	@Deprecated
	@Override
	default int weightInt(Integer element) {
		return get(element.intValue());
	}

	@Deprecated
	@Override
	default int compare(Integer e1, Integer e2) {
		return IWeightFunctionInt.super.compare(e1.intValue(), e2.intValue());
	}

#elif PRIMITIVE_TYPE in ["long", "float", "double"]
	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * Implement the {@link IWeightFunction} interface by using the weights of the container.
	 */
	@Override
	default double weight(int element) {
		return get(element);
	}

	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * Implement the {@link WeightFunctionInt} interface by using the weights of the container.
	 */
	@Deprecated
	@Override
	default double weight(Integer element) {
		return get(element.intValue());
	}

	@Deprecated
	@Override
	default int compare(Integer e1, Integer e2) {
		return IWeightFunction.super.compare(e1.intValue(), e2.intValue());
	}

#endif
}
